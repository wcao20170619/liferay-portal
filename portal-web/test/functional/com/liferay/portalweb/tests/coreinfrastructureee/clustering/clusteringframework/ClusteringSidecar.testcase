@component-name = "portal-clustering"
definition {

	property app.server.bundles.size = "1";
	property cluster.enabled = "true";
	property portal.release = "true";
	property portal.suite.search.engine = "elasticsearch7";
	property portal.upstream = "quarantine";
	property remote.elasticsearch.enabled = "false";
	property test.assert.warning.exceptions = "true";
	property testray.main.component.name = "Clustering";

	setUp {
		TestCase.setUpPortalInstance();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@priority = "5"
	test AddAndRemoveSidecarNodes {
		property app.server.bundles.size = "2";
		property skip.start.app.server.index = "2";
		property test.name.skip.portal.instance = "ClusterSidecar#AddAndRemoveSidecarNodes";

		User.loginPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		Page.assertNodePortPG(nodePort = "8080");

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			panel = "Site Administration",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "WC WebContent Title");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "WC WebContent Content",
			searchAssetTitle = "WC WebContent Title",
			searchAssetType = "Web Content Article");

		Clustering.shutdownSpecificServer(nodePort = "8080");

		Clustering.viewSidecarInfoViaSidecarURL(
			sidecarInfo = '''"status" : "green"''',
			url = "http://127.0.0.1:9201/_cluster/health?pretty");

		Clustering.viewSidecarInfoViaSidecarURL(
			sidecarInfo = '''"number_of_nodes" : 1''',
			url = "http://127.0.0.1:9201/_cluster/health?pretty");

		User.loginPG(
			nodePort = "9080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		Page.assertNodePortPG(nodePort = "9080");

		SearchPortlets.searchEmbedded(searchTerm = "WC WebContent Title");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "WC WebContent Content",
			searchAssetTitle = "WC WebContent Title",
			searchAssetType = "Web Content Article");

		Clustering.startSpecificServer(
			deleteLiferayHome = "true",
			keepCachedAppServerData = "true",
			nodePort = "10080");

		User.logoutPG(
			nodePort = "9080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			nodePort = "10080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		Page.assertNodePortPG(nodePort = "10080");

		SearchPortlets.searchEmbedded(searchTerm = "WC WebContent Title");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "WC WebContent Content",
			searchAssetTitle = "WC WebContent Title",
			searchAssetType = "Web Content Article");

		Clustering.shutdownSpecificServer(nodePort = "10080");
	}

	@priority = "5"
	test AssertClusterSidecarStarted {
		property test.name.skip.portal.instance = "ClusterSidecar#AssertClusterSidecarStarted";

		var sidecarNode1Name = Clustering.getClusterSidecarNodeName(nodePort = "8080");
		var sidecarNode2Name = Clustering.getClusterSidecarNodeName(nodePort = "9080");

		Clustering.viewClusterStatusInConsole();

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Sidecar ${sidecarNode1Name} is at 127.0.0.1:9200",
			nodePort = "8080");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Sidecar ${sidecarNode2Name} is at 127.0.0.1:9201",
			nodePort = "9080");

		Clustering.viewSidecarInfoViaSidecarURL(
			sidecarInfo = "${sidecarNode1Name}",
			url = "http://127.0.0.1:9200");

		Clustering.viewSidecarInfoViaSidecarURL(
			sidecarInfo = "${sidecarNode2Name}",
			url = "http://127.0.0.1:9201");

		Clustering.viewSidecarInfoViaSidecarURL(
			sidecarInfo = '''"status" : "green"''',
			url = "http://127.0.0.1:9200/_cluster/health?pretty");

		Clustering.viewSidecarInfoViaSidecarURL(
			sidecarInfo = '''"number_of_nodes" : 2''',
			url = "http://127.0.0.1:9200/_cluster/health?pretty");

		User.loginPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		Page.assertNodePortPG(nodePort = "8080");

		GlobalMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Search");

		AssertTextEquals.assertPartialText(
			locator1 = "SearchAdmin#SEARCH_ENGINE_VENDOR",
			value1 = "Elasticsearch (Embedded)");

		AssertTextEquals(
			locator1 = "SearchAdmin#ACTIVE_CONNECTION_COUNT",
			value1 = "1");

		AssertTextEquals.assertPartialText(
			locator1 = "SearchAdmin#SIDECAR_CLUSTER_NAME",
			value1 = "LiferayElasticsearchCluster");

		AssertTextEquals.assertPartialText(
			key_nodeName = "${sidecarNode1Name}",
			locator1 = "SearchAdmin#SIDECAR_NODES",
			value1 = "${sidecarNode1Name}");

		AssertTextEquals.assertPartialText(
			key_nodeName = "${sidecarNode2Name}",
			locator1 = "SearchAdmin#SIDECAR_NODES",
			value1 = "${sidecarNode2Name}");

		AssertTextEquals.assertPartialText(
			locator1 = "SearchAdmin#SIDECAR_HEALTH",
			value1 = "Health: GREEN");

		User.logoutPG();

		User.loginPG(
			nodePort = "9080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		Page.assertNodePortPG(nodePort = "9080");

		GlobalMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Search");

		AssertTextEquals.assertPartialText(
			locator1 = "SearchAdmin#SEARCH_ENGINE_VENDOR",
			value1 = "Elasticsearch (Embedded)");

		// Workaround of LPS-109110

		AssertTextEquals(
			locator1 = "SearchAdmin#ACTIVE_CONNECTION_COUNT",
			value1 = "2");

		AssertTextEquals.assertPartialText(
			locator1 = "SearchAdmin#SIDECAR_CLUSTER_NAME",
			value1 = "LiferayElasticsearchCluster");

		AssertTextEquals.assertPartialText(
			key_nodeName = "${sidecarNode1Name}",
			locator1 = "SearchAdmin#SIDECAR_NODES",
			value1 = "${sidecarNode1Name}");

		AssertTextEquals.assertPartialText(
			key_nodeName = "${sidecarNode2Name}",
			locator1 = "SearchAdmin#SIDECAR_NODES",
			value1 = "${sidecarNode2Name}");

		AssertTextEquals.assertPartialText(
			locator1 = "SearchAdmin#SIDECAR_HEALTH",
			value1 = "Health: GREEN");
	}

}