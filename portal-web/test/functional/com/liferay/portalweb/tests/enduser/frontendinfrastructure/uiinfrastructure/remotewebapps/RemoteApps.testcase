definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Remote Apps";
	property testray.main.component.name = "Remote Apps";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			PortalInstances.tearDownCP();

			RemoteApps.tearDown();
		}
	}

	@description = "Verify remote app can be deleted"
	@priority = "5"
	@refactordone
	test CanBeDeleted {
		property portal.acceptance = "true";

		var remoteAppName = "My New Remote App To Delete";

		JSONRemoteApp.addIFrameRemoteAppEntry(
			iFrameURL = "http://www.liferay.com/my_new_remote_app",
			name = "${remoteAppName}");

		RemoteApps.goToRemoteAppsPortlet();

		RemoteApps.deleteRemoteApp(tableEntry = "${remoteAppName}");

		RemoteApps.assertTableEntryNameNotPresent(entryName = "${remoteAppName}");
	}

	@description = "Verify that remote app of type Custom Element can be created"
	@priority = "5"
	test CustomElementCanBeCreated {
		property portal.acceptance = "true";

		task ("Create Vanilla Counter as a Custom Element") {
			RemoteApps.goToRemoteAppsPortlet();

			RemoteApps.addCustomElementAllFields(
				entryCSSURL = "http://remote-component-test.wincent.com/index.css",
				entryHTMLName = "vanilla-counter",
				entryName = "Vanilla Counter",
				entryProperties = "test-data-user=QAuser",
				entryURL = "http://remote-component-test.wincent.com/packages/vanilla-counter/index.js");
		}

		task ("Assert that the Vanilla Counter is listed") {
			RemoteApps.viewTableEntries(
				entryName = "Vanilla Counter",
				entryType = "Custom Element");
		}

		task ("Assert that the Vanilla Counter fields have been saved correctly") {
			Click(
				key_tableEntryName = "Vanilla Counter",
				locator1 = "RemoteApps#TABLE_ENTRY_NAME_REMOTE_TABLE");

			RemoteApps.assertCustomElementFields(
				entryCSSURL = "http://remote-component-test.wincent.com/index.css",
				entryHTMLName = "vanilla-counter",
				entryName = "Vanilla Counter",
				entryProperties = "test-data-user=QAuser",
				entryURL = "http://remote-component-test.wincent.com/packages/vanilla-counter/index.js");
		}
	}

	@description = "Verify that remote app of type Custom Element can be deleted"
	@priority = "4"
	test CustomElementCanBeDeleted {
		property portal.acceptance = "true";

		task ("Create Vanilla Counter as a Custom Element") {
			JSONRemoteApp.addCustomElementRemoteAppEntry(
				customElementHTMLName = "vanilla-counter",
				customElementName = "Vanilla Counter",
				customElementURL = "http://remote-component-test.wincent.com/packages/vanilla-counter/index.js");
		}

		task ("Delete Vanilla Counter") {
			RemoteApps.goToRemoteAppsPortlet();

			RemoteApps.deleteRemoteApp(tableEntry = "${customElementName}");
		}

		task ("Assert that Vanilla Counter has been deleted") {
			RemoteApps.assertTableEntryNameNotPresent(entryName = "${customElementName}");
		}
	}

	@description = "LPS-143552. Verify that remote app of type Custom Element can be displayed by portal instance"
	@ignore = "true"
	@priority = "5"
	test CustomElementCanBeDisplayedByInstance {
		property portal.acceptance = "true";
		property test.assert.warning.exceptions = "true";
		property test.name.skip.portal.instance = "RemoteApps#CustomElementCanBeDisplayedByInstance";

		task ("Create virtual instance") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");
		}

		task ("Navigate to virtual instance") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Assert custom remote app is present") {
			RemoteApps.goToRemoteAppsPortlet();

			RemoteApps.viewTableEntries(
				entryName = "Vanilla Counter",
				entryType = "Custom Element");
		}

		task ("Navigate back to default instance") {
			Navigator.openURL();
		}
	}

	@description = "Verify that remote app of type Custom Element can be displayed by portlet"
	@priority = "5"
	test CustomElementCanBeDisplayedByPortlet {
		property portal.acceptance = "true";

		var customElementName = "Vanilla Counter";
		var customElementHTMLName = "vanilla-counter";
		var customElementURL = "http://remote-component-test.wincent.com/packages/vanilla-counter/index.js";

		task ("Add a public page with JSON") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Test Page",
				type = "content");
		}

		task ("Create Vanilla Counter as a Custom Element") {
			RemoteApps.goToRemoteAppsPortlet();

			RemoteApps.addCustomElement(
				entryHTMLName = "${customElementHTMLName}",
				entryName = "${customElementName}",
				entryURL = "${customElementURL}");
		}

		task ("Add Vanilla Counter to Test Page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page",
				siteName = "Guest");

			PageEditor.addWidget(portletName = "Vanilla Counter");

			PageEditor.clickPublish();
		}

		task ("Assert Vanilla Counter is displayed") {
			Navigator.gotoPage(pageName = "Test Page");

			AssertElementPresent(locator1 = "RemoteApps#VANILLA_COUNTER_REMOTE_APP");
		}
	}

	@description = "Verify that remote app of type Custom Element can be edited"
	@priority = "4"
	test CustomElementCanBeEdited {
		property portal.acceptance = "true";

		var remoteAppName = "New Counter";

		task ("Create a Custom Element") {
			JSONRemoteApp.addCustomElementRemoteAppEntry(
				customElementHTMLName = "new-counter",
				customElementName = "New Counter",
				customElementURL = "http://remote-component-test.wincent.com/packages/vanilla-counter/index.js");
		}

		task ("Edit the fields of the Custom Element") {
			RemoteApps.goToRemoteAppsPortlet();

			Click(
				key_tableEntryName = "${remoteAppName}",
				locator1 = "RemoteApps#TABLE_ENTRY_NAME_REMOTE_TABLE");

			RemoteApps.editCustomElement(
				entryCSSURL = "http://remote-component-test.wincent.com/index.css",
				entryHTMLName = "vanilla-counter-edited",
				entryName = "Vanilla Counter Edited",
				entryProperties = "test-data-user=QAuser");
		}

		task ("Assert that the Custom Element is listed") {
			RemoteApps.viewTableEntryName(entryName = "Vanilla Counter Edited");
		}

		task ("Assert that the fields have been updated") {
			Click(
				key_tableEntryName = "Vanilla Counter Edited",
				locator1 = "RemoteApps#TABLE_ENTRY_NAME_REMOTE_TABLE");

			RemoteApps.assertCustomElementFields(
				entryCSSURL = "http://remote-component-test.wincent.com/index.css",
				entryHTMLName = "vanilla-counter-edited",
				entryName = "Vanilla Counter Edited",
				entryProperties = "test-data-user=QAuser",
				entryURL = "http://remote-component-test.wincent.com/packages/vanilla-counter/index.js");
		}
	}

	@description = "Verify that remote app of type Custom Element can be instanceable in a Content Page"
	@priority = "3"
	test CustomElementCanBeInstanceable {
		property portal.acceptance = "true";

		task ("Add a public page with JSON") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Test Page",
				type = "content");

			JSONLayout.publishLayout(
				groupName = "Guest",
				layoutName = "Test Page");
		}

		task ("Create Vanilla Counter as a Custom Element") {
			JSONRemoteApp.addCustomElementRemoteAppEntry(
				customElementHTMLName = "vanilla-counter",
				customElementName = "Vanilla Counter",
				customElementURL = "http://remote-component-test.wincent.com/packages/vanilla-counter/index.js");
		}

		task ("Add a Grid to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page",
				siteName = "Guest");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Grid");
		}

		task ("Change the Number of Modules to 2") {
			PageEditor.editLayoutGrid(
				columnCount = "2",
				panel = "General");
		}

		task ("Add Vanilla Counter in each module") {
			for (var n : list "1,2") {
				PageEditor.addElementToColumn(
					columnNumber = "${n}",
					navTab = "Widgets",
					portletName = "Vanilla Counter");
			}

			PageEditor.clickPublish();
		}

		task ("Assert Vanilla Counter is instanceable") {
			Navigator.gotoPage(pageName = "Test Page");

			for (var n : list "1,2") {
				AssertElementPresent(
					column_number = "${n}",
					locator1 = "RemoteApps#VANILLA_COUNTER_PAGE_COLUMN_N");
			}
		}
	}

	@description = "Verify that remote app of type Custom Element can save multiple URLs"
	@priority = "4"
	test CustomElementCanSaveMultipleURLs {
		property portal.acceptance = "true";

		task ("Create Vanilla Counter as a Custom Element") {
			RemoteApps.goToRemoteAppsPortlet();

			RemoteApps.addCustomElementMultipleURLs();
		}

		task ("Go to edit entry") {
			Click(
				key_tableEntryName = "Vanilla Counter",
				locator1 = "RemoteApps#TABLE_ENTRY_NAME_REMOTE_TABLE");
		}

		task ("Assert multiple URL fields are saved") {
			RemoteApps.assertCustomElementMultipleURLFields();
		}
	}

	@description = "Verify an iframe remote app can be created"
	@priority = "5"
	test IFrameCanBeCreated {
		property portal.acceptance = "true";

		var remoteAppName = "Test Remote App";

		RemoteApps.goToRemoteAppsPortlet();

		RemoteApps.addApp(
			entryName = "${remoteAppName}",
			entryURL = "http://www.liferay.com");

		RemoteApps.viewTableEntryName(entryName = "${remoteAppName}");
	}

	@description = "Verify that remote app type IFrame can display property fields"
	@priority = "4"
	test IframeTypeCanDisplayProperFields {
		property portal.acceptance = "true";

		var customElementType = "Custom Element";
		var IFrameType = "IFrame";

		RemoteApps.goToRemoteAppsPortlet();

		LexiconEntry.gotoAdd();

		Select(
			locator1 = "Select#TYPE",
			value1 = "${IFrameType}");

		AssertNotVisible(
			key_text = "HTML Element Name",
			locator1 = "TextInput#ANY");

		AssertNotVisible(
			key_text = "CSS URL",
			locator1 = "TextInput#ANY");

		Select(
			locator1 = "Select#TYPE",
			value1 = "${customElementType}");

		AssertVisible(
			key_text = "HTML Element Name",
			locator1 = "TextInput#ANY");

		AssertVisible(
			key_text = "CSS URL",
			locator1 = "TextInput#ANY");
	}

}