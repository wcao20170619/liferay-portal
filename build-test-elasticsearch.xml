<?xml version="1.0"?>

<project basedir="." name="portal-test-elasticsearch" xmlns:antelope="antlib:ise.antelope.tasks">
	<import file="build-test.xml" />

	<macrodef name="configure-elasticsearch-osgi-bundle-properties">
		<sequential>
			<echo file="${liferay.home}/osgi/configs/com.liferay.portal.search.elasticsearch6.configuration.ElasticsearchConfiguration.config">httpEnabled=B&quot;false&quot;
logExceptionsOnly=B&quot;false&quot;
operationMode=&quot;REMOTE&quot;</echo>
		</sequential>
	</macrodef>

	<macrodef name="configure-elasticsearch-properties">
		<sequential>
			<echo append="true" file="${elasticsearch.dir}/config/elasticsearch.yml">${line.separator}cluster.name: LiferayElasticsearchCluster</echo>
		</sequential>
	</macrodef>

	<macrodef name="configure-elasticsearch-x-pack-monitoring-osgi-bundle-properties">
		<sequential>
			<propertyregex
				input="${elastic.xpack.kibana.user.password}"
				override="true"
				property="osgi.config.kibana.user.password"
				regexp="="
				replace="\\\\="
			/>

			<echo append="true" file="${liferay.home}/osgi/configs/com.liferay.portal.search.elasticsearch6.xpack.monitoring.web.internal.configuration.XPackMonitoringConfiguration.config">kibanaPassword="${osgi.config.kibana.user.password}"
proxyServletLogEnable="false"
kibanaUserName="kibana"
kibanaURL="https://localhost:5601"</echo>
		</sequential>
	</macrodef>

	<macrodef name="configure-elasticsearch-x-pack-security-osgi-bundle-properties">
		<sequential>
			<propertyregex
				input="${elastic.xpack.elastic.user.password}"
				override="true"
				property="osgi.config.elastic.user.password"
				regexp="="
				replace="\\\\="
			/>

			<echo append="true" file="${liferay.home}/osgi/configs/com.liferay.portal.search.elasticsearch6.xpack.security.internal.configuration.XPackSecurityConfiguration.config">sslCertificatePath="${elasticsearch.dir}/config/certs/instance/instance.crt"
sslCertificateAuthoritiesPaths="${elasticsearch.dir}/config/certs/ca/ca.crt"
requiresAuthentication="true"
password="${osgi.config.elastic.user.password}"
sslKeyPath="${elasticsearch.dir}/config/certs/instance/instance.key"
certificateFormat="PEM"
transportSSLEnabled="true"</echo>
		</sequential>
	</macrodef>

	<macrodef name="configure-elasticsearch-x-pack-security-properties">
		<sequential>
			<echo append="true" file="${elasticsearch.dir}/config/elasticsearch.yml">
${line.separator}xpack.ssl.key: certs/instance/instance.key
xpack.ssl.certificate: certs/instance/instance.crt
xpack.ssl.certificate_authorities: [ "certs/ca/ca.crt" ]

xpack.security.transport.ssl.enabled: true
xpack.security.transport.ssl.verification_mode: certificate
xpack.security.http.ssl.enabled: true</echo>
		</sequential>
	</macrodef>

	<macrodef name="configure-kibana-properties">
		<sequential>
			<echo append="true" file="${elastic.kibana.dir}/config/kibana.yml">
pid.file: ${elastic.kibana.dir}/bin/pid-kibana

server.basePath: "/o/portal-search-elasticsearch-xpack-monitoring/xpack-monitoring-proxy"

elasticsearch.url: "http://localhost:9200"</echo>
		</sequential>
	</macrodef>

	<macrodef name="configure-kibana-x-pack-security-properties">
		<sequential>
			<echo append="true" file="${elastic.kibana.dir}/config/kibana.yml">
${line.separator}elasticsearch.username: "kibana"
elasticsearch.password: "${elastic.xpack.kibana.user.password}"

xpack.security.encryptionKey: "xsomethingxatxleastx32xcharactersx"
xpack.security.sessionTimeout: 600000

server.ssl.enabled: true
server.ssl.certificate: ${elasticsearch.dir}/config/certs/instance/instance.crt
server.ssl.key: ${elasticsearch.dir}/config/certs/instance/instance.key
elasticsearch.ssl.certificateAuthorities: [ "${elasticsearch.dir}/config/certs/ca/ca.crt" ]</echo>
			<replace
				file="${elastic.kibana.dir}/config/kibana.yml"
			>
				<replacetoken><![CDATA[elasticsearch.url: "http://localhost:9200"]]></replacetoken>
				<replacevalue><![CDATA[elasticsearch.url: "https://localhost:9200"]]></replacevalue>
			</replace>
		</sequential>
	</macrodef>

	<macrodef name="generate-elasticsearch-x-pack-security-certificates">
		<attribute default="liferay" name="certificate.password" />

		<sequential>
			<if>
				<os family="unix" />
				<then>
					<exec dir="${elasticsearch.dir}/bin/x-pack" executable="/bin/bash">
						<arg value="-c" />
						<arg value="./certutil ca --pem --out elastic-stack-ca.zip" />
					</exec>
				</then>
				<elseif>
					<os family="windows" />
					<then>
						<exec dir="${elasticsearch.dir}/bin/x-pack" executable="cmd">
							<arg value="/c" />
							<arg value="certutil ca --pem --out elastic-stack-ca.zip" />
						</exec>
					</then>
				</elseif>
			</if>

			<unzip
				dest="${elasticsearch.dir}/bin/x-pack"
				src="${elasticsearch.dir}/bin/x-pack/elastic-stack-ca.zip"
			/>

			<if>
				<os family="unix" />
				<then>
					<exec dir="${elasticsearch.dir}/bin/x-pack" executable="/bin/bash">
						<arg value="-c" />
						<arg value="./certutil cert --ca-cert ca/ca.crt --ca-key ca/ca.key --pem --out certificate-bundle.zip" />
					</exec>
				</then>
				<elseif>
					<os family="windows" />
					<then>
						<exec dir="${elasticsearch.dir}/bin/x-pack" executable="cmd">
							<arg value="/c" />
							<arg value="certutil cert --ca-cert ca/ca.crt --ca-key ca/ca.key --pem --ip 127.0.0.1 --dns localhost --out certificate-bundle.zip" />
						</exec>
					</then>
				</elseif>
			</if>

			<unzip
				dest="${elasticsearch.dir}/bin/x-pack"
				src="${elasticsearch.dir}/bin/x-pack/certificate-bundle.zip"
			/>

			<move
				file="${elasticsearch.dir}/bin/x-pack/ca"
				todir="${elasticsearch.dir}/config/certs"
			/>

			<move
				file="${elasticsearch.dir}/bin/x-pack/instance"
				todir="${elasticsearch.dir}/config/certs"
			/>

			<delete file="${elasticsearch.dir}/bin/x-pack/elastic-stack-ca.zip" />
			<delete file="${elasticsearch.dir}/bin/x-pack/certificate-bundle.zip" />
		</sequential>
	</macrodef>

	<macrodef name="prepare-elasticsearch">
		<sequential>
			<chmod
				file="${elasticsearch.dir}/bin/**"
				perm="a+x"
			/>

			<if>
				<not>
					<available file="${elasticsearch.dir}/${elasticsearch.analysis-icu.zip.name}" />
				</not>
				<then>
					<mirrors-get
						dest="${elasticsearch.dir}/${elasticsearch.analysis-icu.zip.name}"
						skipChecksum="true"
						src="${elasticsearch.analysis-icu.zip.url}"
					/>
				</then>
			</if>

			<if>
				<not>
					<available file="${elasticsearch.dir}/${elasticsearch.analysis-kuromoji.zip.name}" />
				</not>
				<then>
					<mirrors-get
						dest="${elasticsearch.dir}/${elasticsearch.analysis-kuromoji.zip.name}"
						skipChecksum="true"
						src="${elasticsearch.analysis-kuromoji.zip.url}"
					/>
				</then>
			</if>

			<if>
				<not>
					<available file="${elasticsearch.dir}/${elasticsearch.analysis-smartcn.zip.name}" />
				</not>
				<then>
					<mirrors-get
						dest="${elasticsearch.dir}/${elasticsearch.analysis-smartcn.zip.name}"
						skipChecksum="true"
						src="${elasticsearch.analysis-smartcn.zip.url}"
					/>
				</then>
			</if>

			<if>
				<not>
					<available file="${elasticsearch.dir}/${elasticsearch.analysis-stempel.zip.name}" />
				</not>
				<then>
					<mirrors-get
						dest="${elasticsearch.dir}/${elasticsearch.analysis-stempel.zip.name}"
						skipChecksum="true"
						src="${elasticsearch.analysis-stempel.zip.url}"
					/>
				</then>
			</if>

			<if>
				<os family="unix" />
				<then>
					<for list="${elasticsearch.analysis-icu.zip.name},${elasticsearch.analysis-kuromoji.zip.name},${elasticsearch.analysis-smartcn.zip.name},${elasticsearch.analysis-stempel.zip.name}" param="elasticsearch.plugin.name">
						<sequential>
							<exec dir="${elasticsearch.dir}/bin" executable="/bin/bash">
								<arg value="-c" />
								<arg value="./elasticsearch-plugin install file:///${elasticsearch.dir}/@{elasticsearch.plugin.name}" />
							</exec>
						</sequential>
					</for>
				</then>
				<elseif>
					<os family="windows" />
					<then>
						<for list="${elasticsearch.analysis-icu.zip.name},${elasticsearch.analysis-kuromoji.zip.name},${elasticsearch.analysis-smartcn.zip.name},${elasticsearch.analysis-stempel.zip.name}" param="elasticsearch.plugin.name">
							<sequential>
								<exec dir="${elasticsearch.dir}/bin" executable="cmd">
									<arg value="/c" />
									<arg value="elasticsearch-plugin install file:///${elasticsearch.dir}/@{elasticsearch.plugin.name}" />
								</exec>
							</sequential>
						</for>
					</then>
				</elseif>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="prepare-elasticsearch-x-pack">
		<sequential>
			<if>
				<not>
					<available file="${elasticsearch.dir}/${elastic.x-pack.zip.name}" />
				</not>
				<then>
					<mirrors-get
						dest="${elasticsearch.dir}/${elastic.x-pack.zip.name}"
						skipChecksum="true"
						src="${elasticsearch.x-pack.zip.url}"
					/>
				</then>
			</if>

			<if>
				<os family="unix" />
				<then>
					<exec dir="${elasticsearch.dir}/bin" executable="/bin/bash">
						<arg value="-c" />
						<arg value="./elasticsearch-plugin install file:///${elasticsearch.dir}/${elastic.x-pack.zip.name}" />
					</exec>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="prepare-kibana-x-pack">
		<sequential>
			<if>
				<os family="unix" />
				<then>
					<exec dir="${elastic.kibana.dir}/bin" executable="/bin/bash">
						<arg value="-c" />
						<arg value="./kibana-plugin install file:///${elasticsearch.dir}/${elastic.x-pack.zip.name}" />
					</exec>
				</then>
				<elseif>
					<os family="windows" />
					<then>
						<exec dir="${elastic.kibana.dir}/bin" executable="cmd" spawn="true">
							<arg value="/c" />
							<arg value="kibana-plugin install file:///${elasticsearch.dir}/${elastic.x-pack.zip.name}" />
						</exec>
					</then>
				</elseif>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="set-elasticsearch-x-pack-user-passwords">
		<sequential>
			<if>
				<os family="unix" />
				<then>
					<exec dir="${elasticsearch.dir}/bin/x-pack" executable="/bin/bash" outputproperty="elastic.xpack.user.passwords">
						<arg value="-c" />
						<arg value="./setup-passwords auto --batch" />
					</exec>
				</then>
				<elseif>
					<os family="windows" />
					<then>
						<exec dir="${elasticsearch.dir}/bin/x-pack" executable="cmd" outputproperty="elastic.xpack.user.passwords">
							<arg value="/c" />
							<arg value="setup-passwords auto --batch" />
						</exec>
					</then>
				</elseif>
			</if>

			<propertyregex
				input="${elastic.xpack.user.passwords}"
				override="true"
				property="elastic.xpack.kibana.user.password"
				regexp="(PASSWORD kibana = )(\S*)"
				select="\2"
			/>

			<propertyregex
				input="${elastic.xpack.user.passwords}"
				override="true"
				property="elastic.xpack.elastic.user.password"
				regexp="(PASSWORD elastic = )(\S*)"
				select="\2"
			/>
		</sequential>
	</macrodef>

	<macrodef name="unzip-elasticsearch">
		<sequential>
			<delete dir="${elasticsearch.dir}" />

			<if>
				<not>
					<available file="${app.server.parent.dir}/${elasticsearch.zip.name}" />
				</not>
				<then>
					<mirrors-get
						dest="${app.server.parent.dir}/${elasticsearch.zip.name}"
						skipChecksum="true"
						src="${elasticsearch.zip.url}"
					/>
				</then>
			</if>

			<unzip
				dest="${app.server.parent.dir}"
				src="${app.server.parent.dir}/${elasticsearch.zip.name}"
			/>
		</sequential>
	</macrodef>

	<macrodef name="unzip-kibana">
		<sequential>
			<delete file="${app.server.parent.dir}/${elastic.kibana.tar.name.mac}" />

			<delete file="${app.server.parent.dir}/${elastic.kibana.tar.name.linux}" />

			<delete file="${app.server.parent.dir}/${elastic.kibana.zip.name.windows}" />

			<if>
				<and>
					<not>
						<available file="${app.server.parent.dir}/${elastic.kibana.tar.name.mac}" />
					</not>
					<os family="mac" />
				</and>
				<then>
					<mirrors-get
						dest="${app.server.parent.dir}/${elastic.kibana.tar.name.mac}"
						skipChecksum="true"
						src="${elastic.kibana.tar.url.mac}"
					/>

					<exec dir="${app.server.parent.dir}" executable="/bin/bash">
						<arg value="-c" />
						<arg value="tar -zxf ${elastic.kibana.tar.name.mac}" />
					</exec>
				</then>
				<elseif>
					<and>
						<not>
							<available file="${app.server.parent.dir}/${elastic.kibana.tar.name.linux}" />
						</not>
						<os family="unix" />
					</and>
					<then>
						<mirrors-get
							dest="${app.server.parent.dir}/${elastic.kibana.tar.name.linux}"
							skipChecksum="true"
							src="${elastic.kibana.tar.url.linux}"
						/>

						<untar
							compression="gzip"
							dest="${app.server.parent.dir}"
							src="${app.server.parent.dir}/${elastic.kibana.tar.name.linux}"
						/>
					</then>
				</elseif>
				<elseif>
					<and>
						<not>
							<available file="${app.server.parent.dir}/${elastic.kibana.zip.name}" />
						</not>
						<os family="windows" />
					</and>
					<then>
						<mirrors-get
							dest="${app.server.parent.dir}/${elastic.kibana.zip.name.windows}"
							skipChecksum="true"
							src="${elastic.kibana.zip.url.windows}"
						/>

						<unzip
							dest="${app.server.parent.dir}"
							src="${app.server.parent.dir}/${elastic.kibana.zip.name.windows}"
						/>
					</then>
				</elseif>
			</if>

			<delete dir="${elastic.kibana.dir}" />

			<if>
				<os family="mac" />
				<then>
					<move
						file="${app.server.parent.dir}/kibana-${elastic.kibana.version}-darwin-x86_64"
						tofile="${elastic.kibana.dir}"
					/>
				</then>
				<elseif>
					<os family="unix" />
					<then>
						<move
							file="${app.server.parent.dir}/kibana-${elastic.kibana.version}-linux-x86_64"
							tofile="${elastic.kibana.dir}"
						/>
					</then>
				</elseif>
				<elseif>
					<os family="windows" />
					<then>
						<move
							file="${app.server.parent.dir}/kibana-${elastic.kibana.version}-windows-x86"
							tofile="${elastic.kibana.dir}"
						/>
					</then>
				</elseif>
			</if>
		</sequential>
	</macrodef>

	<target name="configure-elasticsearch-cluster-properties">
		<math
			datatype="int"
			operand1="${remote.elasticsearch.cluster.size}"
			operand2="2"
			operation="/"
			result="elasticsearch.master-eligible.nodes.quorum"
		/>

		<math
			datatype="int"
			operand1="${elasticsearch.master-eligible.nodes.quorum}"
			operand2="1"
			operation="+"
			result="elasticsearch.master-eligible.nodes.quorum"
		/>

		<echo append="true" file="${elasticsearch.dir}/config/elasticsearch.yml">${line.separator}discovery.zen.minimum_master_nodes: ${elasticsearch.master-eligible.nodes.quorum}</echo>
	</target>

	<target name="configure-elasticsearch-osgi-bundle-properties">
		<echo file="${liferay.home}/osgi/configs/com.liferay.portal.search.elasticsearch6.configuration.ElasticsearchConfiguration.config">httpEnabled=B&quot;false&quot;
logExceptionsOnly=B&quot;false&quot;
operationMode=&quot;REMOTE&quot;</echo>
	</target>

	<target name="configure-elasticsearch-properties">
		<replace
			file="${elasticsearch.dir}/config/elasticsearch.yml"
		>
			<replacetoken><![CDATA[#cluster.name: my-application]]></replacetoken>
			<replacevalue><![CDATA[cluster.name: LiferayElasticsearchCluster]]></replacevalue>
		</replace>

		<echo append="true" file="${elasticsearch.dir}/config/elasticsearch.yml">${line.separator}action.auto_create_index: .security,.monitoring*,.watches,.triggered_watches,.watcher-history*,.ml*${line.separator}bootstrap.system_call_filter: false</echo>
	</target>

	<target name="configure-kibana-properties">
		<replace
			file="${elastic.kibana.dir}/config/kibana.yml"
		>
			<replacetoken><![CDATA[#pid.file: /var/run/kibana.pid]]></replacetoken>
			<replacevalue><![CDATA[pid.file: ${elastic.kibana.dir}/bin/pid-kibana]]></replacevalue>
		</replace>

		<replace
			file="${elastic.kibana.dir}/config/kibana.yml"
		>
			<replacetoken><![CDATA[#elasticsearc.username: "user"
#elasticsearch.password: "pass"]]></replacetoken>
			<replacevalue><![CDATA[elasticsearch.username: "kibana"
elasticsearch.password: "kibanapassword"]]></replacevalue>
		</replace>
	</target>

	<target name="prepare-additional-elasticsearch-dirs">
		<var name="elasticsearch.node.number" value="0" />

		<antelope:repeat count="${remote.elasticsearch.cluster.size}">
			<math
				datatype="int"
				operand1="${elasticsearch.node.number}"
				operand2="1"
				operation="+"
				result="elasticsearch.node.number"
			/>

			<delete dir="${elasticsearch.dir}-${elasticsearch.node.number}" />

			<copy
				todir="${elasticsearch.dir}-${elasticsearch.node.number}"
			>
				<fileset
					dir="${elasticsearch.dir}"
				/>
			</copy>
		</antelope:repeat>

		<delete dir="${elasticsearch.dir}" />
	</target>

	<target name="start-elasticsearch">
		<unzip-elasticsearch />

		<prepare-elasticsearch />

		<configure-elasticsearch-properties />

		<get-testcase-property property.name="elastic.xpack.enabled" />

		<if>
			<equals arg1="${elastic.xpack.enabled}" arg2="true" />
			<then>
				<prepare-elasticsearch-x-pack />

				<property name="xpack.certificate.password" value="liferay" />

				<generate-elasticsearch-x-pack-security-certificates certificate.password="${xpack.certificate.password}" />

				<configure-elasticsearch-x-pack-security-properties />
			</then>
		</if>

		<configure-elasticsearch-osgi-bundle-properties />

		<get-testcase-property property.name="remote.elasticsearch.cluster.size" />

		<if>
			<not>
				<isset property="remote.elasticsearch.cluster.size" />
			</not>
			<then>
				<property name="remote.elasticsearch.cluster.size" value="1" />
			</then>
		</if>

		<antcall target="configure-elasticsearch-cluster-properties" />

		<antcall target="prepare-additional-elasticsearch-dirs" />

		<antcall target="start-elasticsearch-node" />

		<if>
			<equals arg1="${elastic.xpack.enabled}" arg2="true" />
			<then>
				<sleep seconds="30" />

				<set-elasticsearch-x-pack-user-passwords />

				<exec executable="curl" outputproperty="curl.output">
					<arg value="https://localhost:9200" />
					<arg value="-ku" />
					<arg value="elastic:${elastic.xpack.elastic.user.password}" />
				</exec>

				<echo>${curl.output}</echo>

				<if>
					<contains string="${curl.output}" substring="You Know, for Search" />
					<then>
						<echo>Elasticshield successfully started with X-Pack Security.</echo>
					</then>
					<else>
						<fail>Elasticsearch failed to start with X-Pack Security.</fail>
					</else>
				</if>

				<configure-elasticsearch-x-pack-security-osgi-bundle-properties />

				<configure-elasticsearch-x-pack-monitoring-osgi-bundle-properties />

				<antcall target="start-kibana" />
			</then>
			<else>
				<waitfor maxwait="20" maxwaitunit="second" timeoutproperty="elasticsearch.server.not.started">
					<http url="http://localhost:9200/" />
				</waitfor>

				<fail if="elasticsearch.server.not.started" message="Elasticsearch server failed to initialize." />
			</else>
		</if>
	</target>

	<target name="start-elasticsearch-node">
		<sequential>
			<var name="elasticsearch.node.number" value="0" />

			<get-java-jdk-home />

			<antelope:repeat count="${remote.elasticsearch.cluster.size}">
				<math
					datatype="int"
					operand1="${elasticsearch.node.number}"
					operand2="1"
					operation="+"
					result="elasticsearch.node.number"
				/>

				<chmod
					perm="a+rwx"
					type="both"
				>
					<fileset
						dir="${elasticsearch.dir}-${elasticsearch.node.number}"
					/>
				</chmod>

				<if>
					<os family="mac" />
					<then>
						<exec dir="${elasticsearch.dir}-${elasticsearch.node.number}/bin" executable="/bin/bash">
							<arg value="-c" />
							<arg value="./elasticsearch -d -p pid-elasticsearch'" />
						</exec>
					</then>
					<elseif>
						<os family="unix" />
						<then>
							<exec dir="${elasticsearch.dir}-${elasticsearch.node.number}/bin" executable="/bin/bash">
								<arg value="-c" />
								<arg value="sudo -H -u shutdown bash -c 'export JAVA_HOME=${java.jdk.home} &amp;&amp; ./elasticsearch -d -p pid-elasticsearch'" />
							</exec>
						</then>
					</elseif>
					<elseif>
						<os family="windows" />
						<then>
							<exec dir="${elasticsearch.dir}-${elasticsearch.node.number}/bin" executable="cmd" spawn="true">
								<arg value="/c" />
								<arg value="elasticsearch -d -p pid-elasticsearch" />
							</exec>
						</then>
					</elseif>
				</if>
			</antelope:repeat>
		</sequential>
	</target>

	<target name="start-kibana">
		<unzip-kibana />

		<configure-kibana-properties />

		<get-testcase-property property.name="elastic.xpack.enabled" />

		<if>
			<equals arg1="${elastic.xpack.enabled}" arg2="true" />
			<then>
				<prepare-kibana-x-pack />

				<configure-kibana-x-pack-security-properties />
			</then>
		</if>

		<if>
			<os family="unix" />
			<then>
				<exec dir="${elastic.kibana.dir}/bin" executable="/bin/bash">
					<arg value="-c" />
					<arg value="./kibana &gt; kibana.log 2&gt;&amp;1 &amp;" />
				</exec>
			</then>
			<elseif>
				<os family="windows" />
				<then>
					<exec dir="${elastic.kibana.dir}/bin" executable="cmd">
						<arg value="/c" />
						<arg value="kibana" />
					</exec>
				</then>
			</elseif>
		</if>
	</target>

	<target name="stop-elasticsearch">
		<get-testcase-property property.name="remote.elasticsearch.cluster.size" />

		<if>
			<not>
				<isset property="remote.elasticsearch.cluster.size" />
			</not>
			<then>
				<property name="remote.elasticsearch.cluster.size" value="1" />
			</then>
		</if>

		<var name="elasticsearch.node.number" value="0" />

		<antelope:repeat count="${remote.elasticsearch.cluster.size}">
			<math
				datatype="int"
				operand1="${elasticsearch.node.number}"
				operand2="1"
				operation="+"
				result="elasticsearch.node.number"
			/>

			<if>
				<os family="unix" />
				<then>
					<loadfile
						property="pid-elasticsearch"
						srcFile="${elasticsearch.dir}-${elasticsearch.node.number}/bin/pid-elasticsearch"
					>
						<filterchain>
							<linecontainsregexp>
								<regexp pattern="[0-9]*" />
							</linecontainsregexp>
						</filterchain>
					</loadfile>

					<exec dir="${elasticsearch.dir}-${elasticsearch.node.number}/bin" executable="/bin/bash">
						<arg value="-c" />
						<arg value="kill ${pid-elasticsearch}" />
					</exec>

					<var name="pid-elasticsearch" unset="true" />
				</then>
				<elseif>
					<os family="windows" />
					<then>
						<exec dir="${elasticsearch.dir}-${elasticsearch.node.number}/bin" executable="cmd" spawn="true">
							<arg value="/c" />
							<arg value="for /f %x in (pid-elasticsearch) do taskkill /f /pid %x" />
						</exec>
					</then>
				</elseif>
			</if>

			<print-file file.name="${elasticsearch.dir}-${elasticsearch.node.number}/logs/LiferayElasticsearchCluster.log" />
		</antelope:repeat>
	</target>

	<target name="stop-kibana">
		<if>
			<os family="unix" />
			<then>
				<loadfile
					property="pid-kibana"
					srcFile="${elastic.kibana.dir}/bin/pid-kibana"
				>
					<filterchain>
						<linecontainsregexp>
							<regexp pattern="[0-9]*" />
						</linecontainsregexp>
					</filterchain>
				</loadfile>

				<exec dir="${elastic.kibana.dir}/bin" executable="/bin/bash">
					<arg value="-c" />
					<arg value="kill ${pid-kibana}" />
				</exec>
			</then>
		</if>
	</target>
</project>