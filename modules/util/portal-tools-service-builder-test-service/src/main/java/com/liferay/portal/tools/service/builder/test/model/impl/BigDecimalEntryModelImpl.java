/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.portal.tools.service.builder.test.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.tools.service.builder.test.model.BigDecimalEntry;
import com.liferay.portal.tools.service.builder.test.model.BigDecimalEntryModel;

import java.io.Serializable;

import java.math.BigDecimal;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the BigDecimalEntry service. Represents a row in the &quot;BigDecimalEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link BigDecimalEntryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BigDecimalEntryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see BigDecimalEntryImpl
 * @see BigDecimalEntry
 * @see BigDecimalEntryModel
 * @generated
 */
@ProviderType
public class BigDecimalEntryModelImpl extends BaseModelImpl<BigDecimalEntry>
	implements BigDecimalEntryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a big decimal entry model instance should use the {@link BigDecimalEntry} interface instead.
	 */
	public static final String TABLE_NAME = "BigDecimalEntry";
	public static final Object[][] TABLE_COLUMNS = {
			{ "bigDecimalEntryId", Types.BIGINT },
			{ "bigDecimalValue", Types.DECIMAL }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("bigDecimalEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("bigDecimalValue", Types.DECIMAL);
	}

	public static final String TABLE_SQL_CREATE = "create table BigDecimalEntry (bigDecimalEntryId LONG not null primary key,bigDecimalValue DECIMAL(30, 16) null)";
	public static final String TABLE_SQL_DROP = "drop table BigDecimalEntry";
	public static final String ORDER_BY_JPQL = " ORDER BY bigDecimalEntry.bigDecimalValue ASC";
	public static final String ORDER_BY_SQL = " ORDER BY BigDecimalEntry.bigDecimalValue ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.tools.service.builder.test.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.portal.tools.service.builder.test.model.BigDecimalEntry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.tools.service.builder.test.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.portal.tools.service.builder.test.model.BigDecimalEntry"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.portal.tools.service.builder.test.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.portal.tools.service.builder.test.model.BigDecimalEntry"),
			true);
	public static final long BIGDECIMALVALUE_COLUMN_BITMASK = 1L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.portal.tools.service.builder.test.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.portal.tools.service.builder.test.model.BigDecimalEntry"));

	public BigDecimalEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _bigDecimalEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBigDecimalEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _bigDecimalEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BigDecimalEntry.class;
	}

	@Override
	public String getModelClassName() {
		return BigDecimalEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("bigDecimalEntryId", getBigDecimalEntryId());
		attributes.put("bigDecimalValue", getBigDecimalValue());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long bigDecimalEntryId = (Long)attributes.get("bigDecimalEntryId");

		if (bigDecimalEntryId != null) {
			setBigDecimalEntryId(bigDecimalEntryId);
		}

		BigDecimal bigDecimalValue = (BigDecimal)attributes.get(
				"bigDecimalValue");

		if (bigDecimalValue != null) {
			setBigDecimalValue(bigDecimalValue);
		}
	}

	@Override
	public long getBigDecimalEntryId() {
		return _bigDecimalEntryId;
	}

	@Override
	public void setBigDecimalEntryId(long bigDecimalEntryId) {
		_bigDecimalEntryId = bigDecimalEntryId;
	}

	@Override
	public BigDecimal getBigDecimalValue() {
		return _bigDecimalValue;
	}

	@Override
	public void setBigDecimalValue(BigDecimal bigDecimalValue) {
		_columnBitmask = -1L;

		if (_originalBigDecimalValue == null) {
			_originalBigDecimalValue = _bigDecimalValue;
		}

		_bigDecimalValue = bigDecimalValue;
	}

	public BigDecimal getOriginalBigDecimalValue() {
		return _originalBigDecimalValue;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			BigDecimalEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BigDecimalEntry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (BigDecimalEntry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BigDecimalEntryImpl bigDecimalEntryImpl = new BigDecimalEntryImpl();

		bigDecimalEntryImpl.setBigDecimalEntryId(getBigDecimalEntryId());
		bigDecimalEntryImpl.setBigDecimalValue(getBigDecimalValue());

		bigDecimalEntryImpl.resetOriginalValues();

		return bigDecimalEntryImpl;
	}

	@Override
	public int compareTo(BigDecimalEntry bigDecimalEntry) {
		int value = 0;

		value = getBigDecimalValue()
					.compareTo(bigDecimalEntry.getBigDecimalValue());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof BigDecimalEntry)) {
			return false;
		}

		BigDecimalEntry bigDecimalEntry = (BigDecimalEntry)obj;

		long primaryKey = bigDecimalEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		BigDecimalEntryModelImpl bigDecimalEntryModelImpl = this;

		bigDecimalEntryModelImpl._originalBigDecimalValue = bigDecimalEntryModelImpl._bigDecimalValue;

		bigDecimalEntryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<BigDecimalEntry> toCacheModel() {
		BigDecimalEntryCacheModel bigDecimalEntryCacheModel = new BigDecimalEntryCacheModel();

		bigDecimalEntryCacheModel.bigDecimalEntryId = getBigDecimalEntryId();

		bigDecimalEntryCacheModel.bigDecimalValue = getBigDecimalValue();

		return bigDecimalEntryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{bigDecimalEntryId=");
		sb.append(getBigDecimalEntryId());
		sb.append(", bigDecimalValue=");
		sb.append(getBigDecimalValue());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append(
			"com.liferay.portal.tools.service.builder.test.model.BigDecimalEntry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>bigDecimalEntryId</column-name><column-value><![CDATA[");
		sb.append(getBigDecimalEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bigDecimalValue</column-name><column-value><![CDATA[");
		sb.append(getBigDecimalValue());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = BigDecimalEntry.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			BigDecimalEntry.class
		};
	private long _bigDecimalEntryId;
	private BigDecimal _bigDecimalValue;
	private BigDecimal _originalBigDecimalValue;
	private long _columnBitmask;
	private BigDecimalEntry _escapedModel;
}