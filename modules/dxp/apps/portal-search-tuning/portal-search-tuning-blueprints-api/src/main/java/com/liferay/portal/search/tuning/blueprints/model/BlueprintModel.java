/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.liferay.portal.search.tuning.blueprints.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.GroupedModel;
import com.liferay.portal.kernel.model.LocalizedModel;
import com.liferay.portal.kernel.model.MVCCModel;
import com.liferay.portal.kernel.model.ShardedModel;
import com.liferay.portal.kernel.model.StagedAuditedModel;
import com.liferay.portal.kernel.model.WorkflowedModel;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model interface for the Blueprint service. Represents a row in the &quot;Blueprint&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>com.liferay.portal.search.tuning.blueprints.model.impl.BlueprintModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>com.liferay.portal.search.tuning.blueprints.model.impl.BlueprintImpl</code>.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see Blueprint
 * @generated
 */
@ProviderType
public interface BlueprintModel
	extends BaseModel<Blueprint>, GroupedModel, LocalizedModel, MVCCModel,
			ShardedModel, StagedAuditedModel, WorkflowedModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a blueprint model instance should use the {@link Blueprint} interface instead.
	 */

	/**
	 * Returns the primary key of this blueprint.
	 *
	 * @return the primary key of this blueprint
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this blueprint.
	 *
	 * @param primaryKey the primary key of this blueprint
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the mvcc version of this blueprint.
	 *
	 * @return the mvcc version of this blueprint
	 */
	@Override
	public long getMvccVersion();

	/**
	 * Sets the mvcc version of this blueprint.
	 *
	 * @param mvccVersion the mvcc version of this blueprint
	 */
	@Override
	public void setMvccVersion(long mvccVersion);

	/**
	 * Returns the uuid of this blueprint.
	 *
	 * @return the uuid of this blueprint
	 */
	@AutoEscape
	@Override
	public String getUuid();

	/**
	 * Sets the uuid of this blueprint.
	 *
	 * @param uuid the uuid of this blueprint
	 */
	@Override
	public void setUuid(String uuid);

	/**
	 * Returns the blueprint ID of this blueprint.
	 *
	 * @return the blueprint ID of this blueprint
	 */
	public long getBlueprintId();

	/**
	 * Sets the blueprint ID of this blueprint.
	 *
	 * @param blueprintId the blueprint ID of this blueprint
	 */
	public void setBlueprintId(long blueprintId);

	/**
	 * Returns the group ID of this blueprint.
	 *
	 * @return the group ID of this blueprint
	 */
	@Override
	public long getGroupId();

	/**
	 * Sets the group ID of this blueprint.
	 *
	 * @param groupId the group ID of this blueprint
	 */
	@Override
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this blueprint.
	 *
	 * @return the company ID of this blueprint
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this blueprint.
	 *
	 * @param companyId the company ID of this blueprint
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the user ID of this blueprint.
	 *
	 * @return the user ID of this blueprint
	 */
	@Override
	public long getUserId();

	/**
	 * Sets the user ID of this blueprint.
	 *
	 * @param userId the user ID of this blueprint
	 */
	@Override
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this blueprint.
	 *
	 * @return the user uuid of this blueprint
	 */
	@Override
	public String getUserUuid();

	/**
	 * Sets the user uuid of this blueprint.
	 *
	 * @param userUuid the user uuid of this blueprint
	 */
	@Override
	public void setUserUuid(String userUuid);

	/**
	 * Returns the user name of this blueprint.
	 *
	 * @return the user name of this blueprint
	 */
	@AutoEscape
	@Override
	public String getUserName();

	/**
	 * Sets the user name of this blueprint.
	 *
	 * @param userName the user name of this blueprint
	 */
	@Override
	public void setUserName(String userName);

	/**
	 * Returns the create date of this blueprint.
	 *
	 * @return the create date of this blueprint
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this blueprint.
	 *
	 * @param createDate the create date of this blueprint
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this blueprint.
	 *
	 * @return the modified date of this blueprint
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this blueprint.
	 *
	 * @param modifiedDate the modified date of this blueprint
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the status of this blueprint.
	 *
	 * @return the status of this blueprint
	 */
	@Override
	public int getStatus();

	/**
	 * Sets the status of this blueprint.
	 *
	 * @param status the status of this blueprint
	 */
	@Override
	public void setStatus(int status);

	/**
	 * Returns the status by user ID of this blueprint.
	 *
	 * @return the status by user ID of this blueprint
	 */
	@Override
	public long getStatusByUserId();

	/**
	 * Sets the status by user ID of this blueprint.
	 *
	 * @param statusByUserId the status by user ID of this blueprint
	 */
	@Override
	public void setStatusByUserId(long statusByUserId);

	/**
	 * Returns the status by user uuid of this blueprint.
	 *
	 * @return the status by user uuid of this blueprint
	 */
	@Override
	public String getStatusByUserUuid();

	/**
	 * Sets the status by user uuid of this blueprint.
	 *
	 * @param statusByUserUuid the status by user uuid of this blueprint
	 */
	@Override
	public void setStatusByUserUuid(String statusByUserUuid);

	/**
	 * Returns the status by user name of this blueprint.
	 *
	 * @return the status by user name of this blueprint
	 */
	@AutoEscape
	@Override
	public String getStatusByUserName();

	/**
	 * Sets the status by user name of this blueprint.
	 *
	 * @param statusByUserName the status by user name of this blueprint
	 */
	@Override
	public void setStatusByUserName(String statusByUserName);

	/**
	 * Returns the status date of this blueprint.
	 *
	 * @return the status date of this blueprint
	 */
	@Override
	public Date getStatusDate();

	/**
	 * Sets the status date of this blueprint.
	 *
	 * @param statusDate the status date of this blueprint
	 */
	@Override
	public void setStatusDate(Date statusDate);

	/**
	 * Returns the title of this blueprint.
	 *
	 * @return the title of this blueprint
	 */
	public String getTitle();

	/**
	 * Returns the localized title of this blueprint in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized title of this blueprint
	 */
	@AutoEscape
	public String getTitle(Locale locale);

	/**
	 * Returns the localized title of this blueprint in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized title of this blueprint. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getTitle(Locale locale, boolean useDefault);

	/**
	 * Returns the localized title of this blueprint in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized title of this blueprint
	 */
	@AutoEscape
	public String getTitle(String languageId);

	/**
	 * Returns the localized title of this blueprint in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized title of this blueprint
	 */
	@AutoEscape
	public String getTitle(String languageId, boolean useDefault);

	@AutoEscape
	public String getTitleCurrentLanguageId();

	@AutoEscape
	public String getTitleCurrentValue();

	/**
	 * Returns a map of the locales and localized titles of this blueprint.
	 *
	 * @return the locales and localized titles of this blueprint
	 */
	public Map<Locale, String> getTitleMap();

	/**
	 * Sets the title of this blueprint.
	 *
	 * @param title the title of this blueprint
	 */
	public void setTitle(String title);

	/**
	 * Sets the localized title of this blueprint in the language.
	 *
	 * @param title the localized title of this blueprint
	 * @param locale the locale of the language
	 */
	public void setTitle(String title, Locale locale);

	/**
	 * Sets the localized title of this blueprint in the language, and sets the default locale.
	 *
	 * @param title the localized title of this blueprint
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setTitle(String title, Locale locale, Locale defaultLocale);

	public void setTitleCurrentLanguageId(String languageId);

	/**
	 * Sets the localized titles of this blueprint from the map of locales and localized titles.
	 *
	 * @param titleMap the locales and localized titles of this blueprint
	 */
	public void setTitleMap(Map<Locale, String> titleMap);

	/**
	 * Sets the localized titles of this blueprint from the map of locales and localized titles, and sets the default locale.
	 *
	 * @param titleMap the locales and localized titles of this blueprint
	 * @param defaultLocale the default locale
	 */
	public void setTitleMap(Map<Locale, String> titleMap, Locale defaultLocale);

	/**
	 * Returns the description of this blueprint.
	 *
	 * @return the description of this blueprint
	 */
	public String getDescription();

	/**
	 * Returns the localized description of this blueprint in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized description of this blueprint
	 */
	@AutoEscape
	public String getDescription(Locale locale);

	/**
	 * Returns the localized description of this blueprint in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized description of this blueprint. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getDescription(Locale locale, boolean useDefault);

	/**
	 * Returns the localized description of this blueprint in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized description of this blueprint
	 */
	@AutoEscape
	public String getDescription(String languageId);

	/**
	 * Returns the localized description of this blueprint in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized description of this blueprint
	 */
	@AutoEscape
	public String getDescription(String languageId, boolean useDefault);

	@AutoEscape
	public String getDescriptionCurrentLanguageId();

	@AutoEscape
	public String getDescriptionCurrentValue();

	/**
	 * Returns a map of the locales and localized descriptions of this blueprint.
	 *
	 * @return the locales and localized descriptions of this blueprint
	 */
	public Map<Locale, String> getDescriptionMap();

	/**
	 * Sets the description of this blueprint.
	 *
	 * @param description the description of this blueprint
	 */
	public void setDescription(String description);

	/**
	 * Sets the localized description of this blueprint in the language.
	 *
	 * @param description the localized description of this blueprint
	 * @param locale the locale of the language
	 */
	public void setDescription(String description, Locale locale);

	/**
	 * Sets the localized description of this blueprint in the language, and sets the default locale.
	 *
	 * @param description the localized description of this blueprint
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setDescription(
		String description, Locale locale, Locale defaultLocale);

	public void setDescriptionCurrentLanguageId(String languageId);

	/**
	 * Sets the localized descriptions of this blueprint from the map of locales and localized descriptions.
	 *
	 * @param descriptionMap the locales and localized descriptions of this blueprint
	 */
	public void setDescriptionMap(Map<Locale, String> descriptionMap);

	/**
	 * Sets the localized descriptions of this blueprint from the map of locales and localized descriptions, and sets the default locale.
	 *
	 * @param descriptionMap the locales and localized descriptions of this blueprint
	 * @param defaultLocale the default locale
	 */
	public void setDescriptionMap(
		Map<Locale, String> descriptionMap, Locale defaultLocale);

	/**
	 * Returns the configuration of this blueprint.
	 *
	 * @return the configuration of this blueprint
	 */
	@AutoEscape
	public String getConfiguration();

	/**
	 * Sets the configuration of this blueprint.
	 *
	 * @param configuration the configuration of this blueprint
	 */
	public void setConfiguration(String configuration);

	/**
	 * Returns the selected fragments of this blueprint.
	 *
	 * @return the selected fragments of this blueprint
	 */
	@AutoEscape
	public String getSelectedFragments();

	/**
	 * Sets the selected fragments of this blueprint.
	 *
	 * @param selectedFragments the configuration of this blueprint
	 */
	public void setSelectedFragments(String selectedFragments);

	/**
	 * Returns the type of this blueprint.
	 *
	 * @return the type of this blueprint
	 */
	public int getType();

	/**
	 * Sets the type of this blueprint.
	 *
	 * @param type the type of this blueprint
	 */
	public void setType(int type);

	/**
	 * Returns <code>true</code> if this blueprint is approved.
	 *
	 * @return <code>true</code> if this blueprint is approved; <code>false</code> otherwise
	 */
	@Override
	public boolean isApproved();

	/**
	 * Returns <code>true</code> if this blueprint is denied.
	 *
	 * @return <code>true</code> if this blueprint is denied; <code>false</code> otherwise
	 */
	@Override
	public boolean isDenied();

	/**
	 * Returns <code>true</code> if this blueprint is a draft.
	 *
	 * @return <code>true</code> if this blueprint is a draft; <code>false</code> otherwise
	 */
	@Override
	public boolean isDraft();

	/**
	 * Returns <code>true</code> if this blueprint is expired.
	 *
	 * @return <code>true</code> if this blueprint is expired; <code>false</code> otherwise
	 */
	@Override
	public boolean isExpired();

	/**
	 * Returns <code>true</code> if this blueprint is inactive.
	 *
	 * @return <code>true</code> if this blueprint is inactive; <code>false</code> otherwise
	 */
	@Override
	public boolean isInactive();

	/**
	 * Returns <code>true</code> if this blueprint is incomplete.
	 *
	 * @return <code>true</code> if this blueprint is incomplete; <code>false</code> otherwise
	 */
	@Override
	public boolean isIncomplete();

	/**
	 * Returns <code>true</code> if this blueprint is pending.
	 *
	 * @return <code>true</code> if this blueprint is pending; <code>false</code> otherwise
	 */
	@Override
	public boolean isPending();

	/**
	 * Returns <code>true</code> if this blueprint is scheduled.
	 *
	 * @return <code>true</code> if this blueprint is scheduled; <code>false</code> otherwise
	 */
	@Override
	public boolean isScheduled();

	@Override
	public String[] getAvailableLanguageIds();

	@Override
	public String getDefaultLanguageId();

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException;

	@Override
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

}