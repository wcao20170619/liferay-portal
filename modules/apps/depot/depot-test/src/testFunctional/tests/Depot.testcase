@component-name = "portal-document-management"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Depot";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			DMDocument.tearDownCP();

			DMFolder.tearDownCP();

			User.logoutPG();
		}
	}

	@description = "This ensures that a depot can be accessed in the list view."
	@priority = "5"
	test AccessInListView {
		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		Depot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			listView = "true",
			portlet = "Documents and Media");
	}

	@description = "This ensures that a depot can be accessed in the table view."
	@priority = "5"
	test AccessInTableView {
		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		Depot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Documents and Media",
			tableView = "true");
	}

	@description = "This ensures that a depot can be deleted."
	@priority = "5"
	test DeleteDepot {
		DepotNavigator.openDepotAdmin();

		Depot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		Depot.deleteCP(depotName = "Test Depot Name");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that a depot with a folder can be deleted."
	@priority = "4"
	test DeleteDepotWithFolder {
		DepotNavigator.openDepotAdmin();

		Depot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Documents and Media");

		DMFolder.addCP(dmFolderName = "DM Folder Name");

		DepotNavigator.openDepotAdmin();

		Depot.deleteCP(depotName = "Test Depot Name");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that a depot with multiple files can be deleted."
	@priority = "4"
	test DeleteDepotWithMultipleFiles {
		DepotNavigator.openDepotAdmin();

		Depot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Documents and Media");

		DMDocument.addMultipleCP(dmDocumentFileList = "Document_1.doc,Document_2.jpg,Document_3.xls");

		DepotNavigator.openDepotAdmin();

		Depot.deleteCP(depotName = "Test Depot Name");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that a depot can be deleted in the list view."
	@priority = "5"
	test DeleteInListView {
		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		Depot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		Depot.deleteCP(depotName = "Test Depot Name");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that a depot can be deleted in the table view."
	@priority = "5"
	test DeleteInTableView {
		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		Depot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		Depot.deleteCP(depotName = "Test Depot Name");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that a depot can be edited."
	@priority = "5"
	test EditDepot {
		DepotNavigator.openDepotAdmin();

		Depot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		Depot.editDepot(
			depotDescriptionEdit = "This is an edited description of a depot",
			depotName = "Test Depot Name",
			depotNameEdit = "Edited Test Depot Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Edited Test Depot Name",
			portlet = "Documents and Media");
	}

	@description = "This ensures that a depot can be edited in the list view."
	@priority = "5"
	test EditInListView {
		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		Depot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		Depot.editDepot(
			depotDescriptionEdit = "This is an edited description of a depot",
			depotName = "Test Depot Name",
			depotNameEdit = "Edited Test Depot Name",
			listView = "true");

		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DepotNavigator.gotoDepot(
			depotName = "Edited Test Depot Name",
			listView = "true",
			portlet = "Documents and Media");
	}

	@description = "This ensures that a depot can be edited in the table view."
	@priority = "5"
	test EditInTableView {
		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		Depot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		Depot.editDepot(
			depotDescriptionEdit = "This is an edited description of a depot",
			depotName = "Test Depot Name",
			depotNameEdit = "Edited Test Depot Name",
			tableView = "true");

		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		DepotNavigator.gotoDepot(
			depotName = "Edited Test Depot Name",
			portlet = "Documents and Media",
			tableView = "true");
	}

	@description = "This ensures that a depot's description can be searched."
	@priority = "5"
	test SearchForDepotDescription {
		DepotNavigator.openDepotAdmin();

		Depot.addDepot(
			depotDescription = "Description 1",
			depotName = "Depot 1");

		DepotNavigator.openDepotAdmin();

		Depot.addDepot(
			depotDescription = "Description 2",
			depotName = "Depot 2");

		DepotNavigator.openDepotAdmin();

		Depot.addDepot(
			depotDescription = "Description 3",
			depotName = "Depot 3");

		DepotNavigator.openDepotAdmin();

		Depot.addDepot(depotName = "Should be not returned in search");

		DepotNavigator.openDepotAdmin();

		Search.searchCP(searchTerm = "Description");

		Depot.viewSearchResult(
			excludedResults = "Should not be returned in search",
			includedResults = "Depot 1,Depot 2,Depot 3",
			resultCount = "3",
			searchTerm = "Description");

		DepotNavigator.gotoDepot(
			depotName = "Depot 1",
			portlet = "Documents and Media");
	}

	@description = "This ensures that a depot's title can be searched."
	@priority = "5"
	test SearchForDepotTitle {
		DepotNavigator.openDepotAdmin();

		Depot.addDepot(depotName = "Depot 1");

		DepotNavigator.openDepotAdmin();

		Depot.addDepot(depotName = "Depot 2");

		DepotNavigator.openDepotAdmin();

		Depot.addDepot(depotName = "Depot 3");

		DepotNavigator.openDepotAdmin();

		Depot.addDepot(depotName = "Should be not returned in search");

		DepotNavigator.openDepotAdmin();

		Search.searchCP(searchTerm = "Depot");

		Depot.viewSearchResult(
			excludedResults = "Should not be returned in search",
			includedResults = "Depot 1,Depot 2,Depot 3",
			resultCount = "3",
			searchTerm = "Depot");

		DepotNavigator.gotoDepot(
			depotName = "Depot 1",
			portlet = "Documents and Media");
	}

	@description = "This ensures that all depots can be deleted when the user selects all."
	@priority = "4"
	test SelectAllAndDelete {
		DepotNavigator.openDepotAdmin();

		for (var depotName : list "Test Depot Name 1,Test Depot Name 2,Test Depot Name 3") {
			Depot.addDepot(
				depotDescription = "This is the description of a depot",
				depotName = "${depotName}");

			DepotNavigator.openDepotAdmin();
		}

		PortletEntry.selectAll();

		Depot.deleteCP(deletions = "true");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that a depot can be added."
	@priority = "5"
	test Smoke {
		ProductMenu.gotoPortlet(
			category = "Repositories",
			panel = "Control Panel",
			portlet = "Repositories");

		Depot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			portlet = "Documents and Media");
	}

}