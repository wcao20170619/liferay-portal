import com.liferay.gradle.util.FileUtil

import org.apache.tools.ant.filters.FixCrLfFilter

apply plugin: "antlr"

String parserDirName = "com/liferay/wiki/engine/creole/internal/parser/parser"

cleanGenerateGrammarSource {
	delete "src/main/java/" + parserDirName
	delete "src/main/resources/" + parserDirName
}

compileJava {
	dependsOn.remove "generateGrammarSource"
}

configurations {
	compileInclude {
		extendsFrom antlr
	}
}

dependencies {
	antlr group: "org.antlr", name: "antlr", version: "3.0.1"

	compileInclude group: "antlr", name: "antlr", version: "2.7.7"
	compileInclude group: "org.antlr", name: "stringtemplate", version: "3.0"

	compileOnly group: "com.liferay.portal", name: "com.liferay.portal.impl", version: "default"
	compileOnly group: "com.liferay.portal", name: "com.liferay.portal.kernel", version: "default"
	compileOnly group: "com.liferay.portal", name: "com.liferay.util.taglib", version: "default"
	compileOnly group: "javax.portlet", name: "portlet-api", version: "3.0.1"
	compileOnly group: "javax.servlet", name: "javax.servlet-api", version: "3.0.1"
	compileOnly group: "org.osgi", name: "org.osgi.service.component.annotations", version: "1.3.0"
	compileOnly project(":apps:wiki:wiki-api")
	compileOnly project(":core:petra:petra-lang")
	compileOnly project(":core:petra:petra-string")
}

generateGrammarSource {
	setActions([])

	File grammarFile = file("src/main/antlr/${parserDirName}/Creole10.g")

	dependsOn cleanGenerateGrammarSource

	doFirst {
		javaexec {
			args "-o", FileUtil.relativize(generateGrammarSource.outputDirectory, grammarFile.parentFile)
			args grammarFile.name

			classpath = generateGrammarSource.antlrClasspath
			main = "org.antlr.Tool"
			maxHeapSize = generateGrammarSource.maxHeapSize
			workingDir = grammarFile.parentFile
		}
	}

	doLast {
		copy {
			eachFile {
				if (name in ["Creole10Lexer.java", "Creole10Parser.java"]) {
					String javaClass = name[0 .. -6]

					filter {
						String line ->

						line.replace "public class ${javaClass}", """\
@SuppressWarnings(\"all\")
public class ${javaClass}"""
					}
				}
			}

			filter(FixCrLfFilter, javafiles: true, tab: FixCrLfFilter.AddAsisRemove.newInstance("add"))

			from outputDirectory
			include "**/*.java"
			into "src/main/java/" + parserDirName
		}

		copy {
			from outputDirectory
			exclude "**/*.java"
			into "src/main/resources/" + parserDirName
		}
	}

	ext {
		autoClean = false
	}

	maxHeapSize = "1512m"
	outputDirectory = new File(temporaryDir, "generated")
}

liferayOSGi {
	expandCompileInclude = true
}