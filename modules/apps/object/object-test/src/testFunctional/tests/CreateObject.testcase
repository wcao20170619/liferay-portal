@component-name = "portal-object"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			ObjectAdmin.deleteAllCustomObjectsViaAPI();
		}
	}

	@description = "LPS-135390 - Verify it is possible to view and access the Object Admin portlet with the Access in Control Panel permission"
	@ignore = "Test Stub"
	@priority = "4"
	test CanAccessObjectAdminWithAccessPermission {

		// TODO LPS-141598 CanAccessObjectAdminWithAccessPermission pending implementation

	}

	@description = "LPS-135397 - Verify if it's possible to add a Block"
	@priority = "5"
	test CanAddBlock {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.goToLayoutTabOnLayouts();

		ObjectAdmin.addTabFieldsOnLayout(tabName = "Field Tab");

		ObjectAdmin.addLayoutBlockViaUI(blockName = "Block Name");

		ObjectAdmin.assertBlockIsPresent(fieldBlockName = "Block Name");
	}

	@description = "LPS-135397 - Verify if it's possible to add Entries with Custom Layout Created"
	@priority = "4"
	test CanAddEntriesWithCustomLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout",
			objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.markLayoutAsDefault();

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = "2",
			fieldLabelName = "Custom Field",
			tabName = "Field Tab");

		Button.clickSave();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "Entry 1");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "Entry 1");
	}

	@description = "LPS-135635 - Verify it is possible to add a field after the Object is published and submit entries to it"
	@priority = "5"
	test CanAddFieldAndViewEntriesAfterPublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.addSingleFieldEntryViaUI(entry = "String Entry");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "String Entry");
	}

	@description = "LPS-135397 - Verify if it's possible to add a Field for the Block with one column"
	@priority = "4"
	test CanAddFieldForBlockOneColumn {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		SelectFrame(locator1 = "IFrame#IFRAME");

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block Name",
			columnsNumber = "1",
			fieldLabelName = "Custom Field",
			tabName = "Field Tab");

		CreateObject.assertFieldAddedOnBlock(fieldLabelName = "Custom Field");
	}

	@description = "LPS-135397 - Verify if it's possible to add a Field for the Block with three columns"
	@priority = "4"
	test CanAddFieldForBlockThreeColumns {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		SelectFrame(locator1 = "IFrame#IFRAME");

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block Name",
			columnsNumber = "3",
			fieldLabelName = "Custom Field",
			tabName = "Field Tab");

		CreateObject.assertFieldAddedOnBlock(fieldLabelName = "Custom Field");
	}

	@description = "LPS-135397 - Verify if it's possible to add a Field for the Block with two columns"
	@priority = "4"
	test CanAddFieldForBlockTwoColumns {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		SelectFrame(locator1 = "IFrame#IFRAME");

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block Name",
			columnsNumber = "2",
			fieldLabelName = "Custom Field",
			tabName = "Field Tab");

		CreateObject.assertFieldAddedOnBlock(fieldLabelName = "Custom Field");
	}

	@description = "LPS-135397 - Verify if it's possible to add a Tab with Fields Type"
	@priority = "5"
	test CanAddFieldTab {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		SelectFrame(locator1 = "IFrame#IFRAME");

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");

		ObjectAdmin.addTabFieldsOnLayout(tabName = "Field Tab");

		ObjectAdmin.assertFieldTabIsPresent(fieldTabName = "Field Tab");
	}

	@description = "LPS-139803 - Verify it is possible to add a Object Entry Title Field"
	@priority = "5"
	test CanAddObjectEntryTitleField {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.selectTitleField(fieldLabel = "Custom Field");

		CreateObject.saveObject();

		CreateObject.assertTitleFieldIsSelected(fieldLabel = "Custom Field");
	}

	@description = "LPS-135390 - Verify it is possible to add an Object with the Add Object Definition permission"
	@priority = "4"
	test CanAddObjectWithAddPermission {
		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.definePermissionCP(
			permissionDefinitionKey = "CONTROL_PANEL_OBJECTS_PERMISSIONS_APLICATION_PERMISSION_ACCESS_CONTROL_PANEL_CHECKBOX",
			permissionDefinitionValue = "",
			permissionNavigationKey = "CONTROL_PANEL_OBJECTS_PERMISSIONS",
			permissionNavigationValue = "Objects",
			roleTitle = "Regular Role",
			roleType = "Regular");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.definePermissionCP(
			permissionDefinitionKey = "CONTROL_PANEL_OBJECTS_PERMISSIONS_RESOURCE_PERMISSION_ADD_OBJECT_DEFINITION",
			permissionDefinitionValue = "",
			permissionNavigationKey = "CONTROL_PANEL_OBJECTS_PERMISSIONS",
			permissionNavigationValue = "Objects",
			roleTitle = "Regular Role",
			roleType = "Regular");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		Navigator.openURL();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.addNewObject(
			fieldLabelName = "Custom Object",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.saveCustomObject();

		CreateObject.assertCustomObject(labelName = "Custom Object");
	}

	@description = "LPS-135400 - Verify it is possible to add a relation with an entry through the Relationship field"
	@priority = "5"
	test CanAddRelationOnRelationshipField {
		property portal.acceptance = "quarantine";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject",
			objectName_2 = "CustomObject",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		for (var fieldEntry : list "A,B") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject",
				value = "Entry ${fieldEntry}");
		}

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.selectTitleField(fieldLabel = "Custom Field");

		Button.clickSave();

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.markLayoutAsDefault();

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = "1",
			fieldList = "Custom Field,Custom Object",
			tabName = "Field Tab");

		ObjectAdmin.addTabRelationshipsOnLayout(
			relationshipsLabelName = "Relationship",
			tabName = "Relationship Tab");

		Button.clickSave();

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntryDetails(entry = "Entry A");

		ObjectPortlet.selectRelationshipFieldEntry(
			entry = "",
			newEntry = "Entry B");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntryDetails(entry = "Entry B");

		ObjectPortlet.gotoRelationshipTab();

		ObjectPortlet.viewEntry(entry = "Entry A");
	}

	@description = "LPS-135400 - Verify it is possible to add many relations through the Relationship tab"
	@priority = "5"
	test CanAddRelationOnRelationshipTab {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject",
			objectName_2 = "CustomObject",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		for (var fieldEntry : list "A,B") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject",
				value = "Entry ${fieldEntry}");
		}

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.selectTitleField(fieldLabel = "Custom Field");

		Button.clickSave();

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.markLayoutAsDefault();

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = "1",
			fieldList = "Custom Field,Custom Object",
			tabName = "Field Tab");

		ObjectAdmin.addTabRelationshipsOnLayout(
			relationshipsLabelName = "Relationship",
			tabName = "Relationship Tab");

		Button.clickSave();

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntryDetails(entry = "Entry A");

		ObjectAdmin.gotoRelationshipsTab();

		CreateObject.addRelationshipAndSelectEntry(titleFieldName = "Entry B");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntryDetails(entry = "Entry B");

		CreateObject.assertEntrySelectedOnRelationshipField(entry = "Entry A");
	}

	@description = "LPS-135549 - Verify it is possible to cancel the creation of a Custom Object"
	@priority = "4"
	test CanCancelCreationCustomObject {
		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.addNewObject(
			fieldLabelName = "Custom Object",
			pluralLabelName = "Custom Objects");

		Button.clickCancel();

		AssertElementNotPresent(
			key_name = "CustomObject",
			key_system = "No",
			locator1 = "ObjectAdmin#VIEW_OBJECT");
	}

	@description = "LPS-135549 - Verify it is possible to cancel the creation of a Field"
	@priority = "4"
	test CanCancelCreationField {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		LexiconEntry.gotoAdd();

		Type(
			locator1 = "ObjectAdmin#OBJECT_FIELDS_LABEL_INPUT",
			value1 = "Custom Field");

		Select(
			locator1 = "ObjectAdmin#OBJECT_FIELDS_TYPE",
			value1 = "String");

		Button.clickCancel();

		ObjectAdmin.assertObjectFieldNotPresent(fieldLabel = "Custom Field");
	}

	@description = "LPS-135400 - Verify it is possible to cancel the creation of a Relationship"
	@priority = "4"
	test CanCancelRelationshipCreation {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.gotoRelationshipsTab();

		LexiconEntry.gotoAdd();

		Type(
			locator1 = "ObjectAdmin#LABEL_OBJECT_RELATIONSHIP",
			value1 = "Custom Relationship");

		Click(locator1 = "ObjectAdmin#RELATIONSHIPS_TYPE_FORM");

		Click(
			key_type = "One to Many",
			locator1 = "ObjectAdmin#SELECT_RELATIONSHIPS_TYPE_OPTION");

		Select(
			locator1 = "ObjectAdmin#SELECT_OBJECT_RELATIONSHIP",
			value1 = "CustomObject");

		Button.clickCancel();

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "No items were found.");
	}

	@description = "LPS-135397 - Verify it is possible to Cancel the update of a Layout"
	@priority = "4"
	test CanCancelUpdateLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout",
			objectName = "CustomObject");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		SelectFrame(locator1 = "IFrame#IFRAME");

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = "2",
			fieldLabelName = "Custom Field",
			tabName = "Field Tab");

		Click(locator1 = "ObjectAdmin#LAYOUT_INFO_TAB");

		Type(
			locator1 = "ObjectAdmin#LAYOUT_BASIC_INFO_NAME_FIELD",
			value1 = "Layout Updated");

		Button.clickCancel();

		Refresh();

		AssertTextNotEquals(
			key_name = "Layout",
			locator1 = "ObjectAdmin#TABLE_LIST_TITLE",
			value1 = "Layout Updated");
	}

	@description = "LPS-135551 - Verify it is possible to change the Panel Category Key after publishing the Object"
	@ignore = "Test Stub"
	@priority = "4"
	test CanChangePanelCategoryKeyAfterPublished {

		// TODO LPS-141648 CanChangePanelCategoryKeyAfterPublished pending implementation

	}

	@description = "LPS-135397 - Verify it is possible to collapse and expand a block of fields"
	@priority = "4"
	test CanCollapseAndExpandBlock {
		property portal.upstream = "quarantine";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout",
			objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.markLayoutAsDefault();

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = "2",
			fieldLabelName = "Custom Field",
			isCollapsible = "Yes",
			tabName = "Field Tab");

		Button.clickSave();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		CreateObject.assertCanCollapseAndExpandEntryField();
	}

	@description = "LPS-135549 - Verify it is possible to create a BigDecimal field"
	@priority = "4"
	test CanCreateBigDecimalField {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Custom Field",
			fieldType = "BigDecimal");

		Refresh();

		ObjectAdmin.assertObjectField(
			fieldLabel = "Custom Field",
			fieldType = "BigDecimal");
	}

	@description = "LPS-135549 - Verify it is possible to create a Boolean field"
	@priority = "4"
	test CanCreateBooleanField {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Custom Field",
			fieldType = "Boolean");

		Refresh();

		ObjectAdmin.assertObjectField(
			fieldLabel = "Custom Field",
			fieldType = "Boolean");
	}

	@description = "LPS-135549 - Verify if it is possible to create a Custom Object"
	@priority = "5"
	test CanCreateCustomObject {
		property portal.acceptance = "true";

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.addNewObject(
			fieldLabelName = "Custom Object",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.saveCustomObject();

		CreateObject.assertCustomObject(labelName = "Custom Object");
	}

	@description = "LPS-135549 - Verify it is possible to create a Date field"
	@priority = "4"
	test CanCreateDateField {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Custom Field",
			fieldType = "Date");

		Refresh();

		ObjectAdmin.assertObjectField(
			fieldLabel = "Custom Field",
			fieldType = "Date");
	}

	@description = "LPS-135549 - Verify it is possible to create a Double field"
	@priority = "4"
	test CanCreateDoubleField {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Custom Field",
			fieldType = "Double");

		Refresh();

		ObjectAdmin.assertObjectField(
			fieldLabel = "Custom Field",
			fieldType = "Double");
	}

	@description = "LPS-135549 - Verify it is possible to create an Integer field"
	@priority = "4"
	test CanCreateIntegerField {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Custom Field",
			fieldType = "Integer");

		Refresh();

		ObjectAdmin.assertObjectField(
			fieldLabel = "Custom Field",
			fieldType = "Integer");
	}

	@description = "LPS-135397 - Verify if it's possible to create a Layout for an Object"
	@priority = "5"
	test CanCreateLayout {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.addObjectLayoutViaUI(layoutName = "Layout Name");

		ObjectAdmin.assertObjectLayout(layoutLabel = "Layout Name");
	}

	@description = "LPS-135549 - Verify it is possible to create a Long field"
	@priority = "4"
	test CanCreateLongField {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Custom Field",
			fieldType = "Long");

		ObjectAdmin.assertObjectField(
			fieldLabel = "Custom Field",
			fieldType = "Long");
	}

	@description = "LPS-135401 - Verify it is possible to create a Many to Many Relationship"
	@priority = "5"
	test CanCreateManyToManyRelationship {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Object A",
			objectName = "ObjectA",
			pluralLabelName = "Objects A");

		ObjectAdmin.addObjectViaAPI(
			labelName = "Object B",
			objectName = "ObjectB",
			pluralLabelName = "Objects B");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.gotoRelationshipsTab();

		ObjectAdmin.addObjectRelationshipViaUI(
			label = "Relationship",
			object = "ObjectB",
			type = "Many to Many");

		AssertElementPresent(
			key_label = "Relationship",
			locator1 = "ObjectAdmin#RELATIONSHIP_LABEL");
	}

	@description = "LPS-135400 - Verify it is possible to create a One to Many Relationship"
	@priority = "4"
	test CanCreateOneToManyRelationship {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object A",
			objectName = "CustomObjectA",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object B",
			objectName = "CustomObjectB",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object A");

		ObjectAdmin.gotoRelationshipsTab();

		ObjectAdmin.addObjectRelationshipViaUI(
			label = "Relationship",
			object = "CustomObjectB",
			type = "One to Many");

		AssertElementPresent(
			key_label = "Relationship",
			locator1 = "ObjectAdmin#RELATIONSHIP_LABEL");
	}

	@description = "LPS-136595 - Verify it is possible to create a Picklist field"
	@priority = "4"
	test CanCreatePicklistField {
		Picklist.addPicklistViaAPI(picklistName = "Custom Picklist");

		Picklist.addPicklistItemViaAPI(
			itemKey = "0",
			itemName = "Item Test",
			picklistName = "Custom Picklist");

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Field Picklist",
			fieldPicklist = "Custom Picklist",
			fieldType = "Picklist");

		ObjectAdmin.assertObjectField(
			fieldLabel = "Field Picklist",
			fieldType = "String");
	}

	@description = "LPS-135549 - Verify it is possible to create a String field"
	@priority = "5"
	test CanCreateStringField {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Custom Field",
			fieldType = "String");

		Refresh();

		ObjectAdmin.assertObjectField(
			fieldLabel = "Custom Field",
			fieldType = "String");
	}

	@description = "LPS-137879 - Verify it is not possible to delete a Custom Object field after the Object is published"
	@ignore = "Test Stub"
	@priority = "4"
	test CanDeleteCustomObjectFieldAfterPublished {

		// TODO LPS-141644 CanDeleteCustomObjectFieldAfterPublished pending implementation

	}

	@description = "LPS-137879 - Verify it is possible to delete a Custom Object field before the Object is published"
	@ignore = "Test Stub"
	@priority = "4"
	test CanDeleteCustomObjectFieldBeforePublished {

		// TODO LPS-141643 CanDeleteCustomObjectFieldBeforePublished pending implementation

	}

	@description = "LPS-135397 - Verify if it's possible to delete a Field"
	@priority = "5"
	test CanDeleteFieldOnLayout {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		SelectFrame(locator1 = "IFrame#IFRAME");

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block Name",
			columnsNumber = "1",
			fieldLabelName = "Custom Field",
			tabName = "Field Tab");

		CreateObject.deleteFieldOnBlock();

		CreateObject.assertFieldNotPresentInBlock(fieldLabelName = "Custom Field");
	}

	@description = "LPS-135397 - Verify if it's possible to delete a Layout for an Object"
	@priority = "5"
	test CanDeleteLayout {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "Delete");

		ObjectAdmin.assertObjectLayoutNotPresent(layoutLabel = "Layout Name");
	}

	@description = "LPS-135390 - Verify it is possible to delete an Object with the Delete permission"
	@ignore = "Test Stub"
	@priority = "4"
	test CanDeleteObjectWithDeletePermission {

		// TODO LPS-141604 CanDeleteObjectWithDeletePermission pending implementation

	}

	@description = "LPS-135401 - Verify that it is possible to delete a relation with an entry on the Relationship tab"
	@priority = "5"
	test CanDeleteRelationOnRelationshipTab {
		property portal.acceptance = "quarantine";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject",
			objectName_2 = "CustomObject",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.selectTitleField(fieldLabel = "Custom Field");

		Button.clickSave();

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.markLayoutAsDefault();

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = "1",
			fieldList = "Custom Field,Custom Object",
			tabName = "Field Tab");

		ObjectAdmin.addTabFieldsOnLayout(tabName = "Field Tab");

		ObjectAdmin.addTabRelationshipsOnLayout(
			relationshipsLabelName = "Relationship",
			tabName = "Relationship Tab");

		Button.clickSave();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "Entry A");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectAdmin.addObjectStringFieldEntryViaUI(
			entryOption = "Entry A",
			entryValue = "Entry B");

		ObjectAdmin.gotoRelationshipsTab();

		CreateObject.addRelationshipAndSelectEntry(titleFieldName = "Entry A");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntryDetails(entry = "Entry A");

		CreateObject.deleteEntryInRelationshipTab();

		ObjectPortlet.assertEntryNotPresent(entry = "Entry B");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntryDetails(entry = "Entry B");

		ObjectPortlet.assertEntryNotPresent(entry = "Entry A");
	}

	@description = "LPS-135400 - Verify it is possible to delete a Relationship"
	@priority = "5"
	test CanDeleteRelationship {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject",
			objectName_2 = "CustomObject",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.gotoRelationshipsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "Delete");

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "No items were found.");
	}

	@description = "LPS-135390 - Verify it is not possible to view and access the Object Admin portlet without the Access in Control Panel permission"
	@priority = "5"
	test CannotAccessObjectAdminWithoutAccessPermission {
		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ApplicationsMenu.assertMenuButtonIsNotPresent();
	}

	@description = "LPS-135390 - Verify it is not possible to add an Object without the Add Object Definition permission"
	@priority = "5"
	test CannotAddObjectWithoutAddPermission {
		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.definePermissionCP(
			permissionDefinitionKey = "CONTROL_PANEL_OBJECTS_PERMISSIONS_APLICATION_PERMISSION_ACCESS_CONTROL_PANEL_CHECKBOX",
			permissionDefinitionValue = "",
			permissionNavigationKey = "CONTROL_PANEL_OBJECTS_PERMISSIONS",
			permissionNavigationValue = "Objects",
			roleTitle = "Regular Role",
			roleType = "Regular");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		Navigator.openURL();

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.assertPlusButtonIsNotPresent();
	}

	@description = "LPS-135397 - Verify if it's not possible to add a Tab with Relationship Type in an Object without Relashionsip"
	@priority = "4"
	test CannotAddRelationshibTabWithoutRelationship {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.goToLayoutTabOnLayouts();

		ObjectAdmin.addTabFieldsOnLayout(tabName = "Field Tab");

		ObjectAdmin.addTabRelationshipsOnLayout(tabName = "Relationship Tab");

		Click(
			key_tab = "Save",
			locator1 = "Button#TAB_SUBMIT_BTN");

		ObjectAdmin.assertObjectLayoutRelationshipFieldRequiredError();
	}

	@description = "LPS-135397 - Verify that the Relationship tab cannot be added first"
	@priority = "4"
	test CannotAddRelationshipTabFirst {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.goToLayoutTabOnLayouts();

		CreateObject.assertCannotAddRelationshipTabFirst();
	}

	@description = "LPS-135549 - Verify that it is not possible to create a Field with a duplicated Field Name"
	@priority = "4"
	test CannotCreateDuplicatedFieldName {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String");

		ObjectAdmin.viewFieldErrorMessage(message = "This name is already in use. Try another one.");
	}

	@description = "LPS-135549 - Verify that it is not possible to create a Object with a duplicated Object Name"
	@priority = "4"
	test CannotCreateDuplicatedObjectName {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.addNewObject(
			fieldLabelName = "Custom Object",
			fieldName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.saveCustomObject();

		ObjectAdmin.viewFieldErrorMessage(message = "This name is already in use. Try another one.");
	}

	@description = "LPS-135400 - Verify it is not possible to create duplicated Relationship name"
	@priority = "4"
	test CannotCreateDuplicatedRelationshipName {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject",
			objectName_2 = "CustomObject",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.gotoRelationshipsTab();

		ObjectAdmin.addObjectRelationshipViaUI(
			label = "Relationship",
			object = "CustomObject",
			type = "One to Many");

		AssertTextEquals(
			locator1 = "Message#ERROR",
			value1 = "Duplicate name relationship");
	}

	@description = "LPS-135390 - Verify it is not possible to delete an Object without the Delete permission"
	@priority = "4"
	test CannotDeleteObjectWithoutDeletePermission {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		for (var resourceAction : list "ACCESS_IN_CONTROL_PANEL,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com_liferay_object_web_internal_object_definitions_portlet_ObjectDefinitionsPortlet",
				roleTitle = "Regular Role");
		}

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		Navigator.openURL();

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.assertDeleteEntryButtonNotPresent(entry = "Custom Object");
	}

	@description = "LPS-139160 - Verify it is not possible to delete an Object via API after it was published"
	@priority = "4"
	test CannotDeletePublishedObjectViaApi {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.assertObjectStatus(
			label = "Custom Object",
			status = "Approved");
	}

	@description = "LPS-135400 - Verify it is not possible to delete a Relationship when an Object is published"
	@priority = "5"
	test CannotDeleteRelationshipWhenPublished {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject",
			objectName_2 = "CustomObject",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.gotoRelationshipsTab();

		AssertElementNotPresent(locator1 = "ObjectAdmin#KEBAB_MENU");

		AssertElementNotPresent(
			key_kebabOption = "Delete",
			locator1 = "ObjectAdmin#KEBAB_MENU_OPTION");
	}

	@description = "LPS-135549 - Verify it is not possible to leave the Field Name field blank"
	@priority = "4"
	test CannotLeaveFieldNameBlank {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Custom Field",
			fieldName = " ",
			fieldType = "String");

		ObjectAdmin.viewFieldErrorMessage(message = "Name is required.");
	}

	@description = "LPS-135549 - Verify it is not possible to leave the Label field blank"
	@priority = "4"
	test CannotLeaveLabelFieldBlank {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "",
			fieldName = "customField",
			fieldType = "String");

		ObjectAdmin.assertLabelFieldRequired();
	}

	@description = "LPS-135549 - Verify it is not possible to leave the Object Label field blank"
	@priority = "4"
	test CannotLeaveObjectLabelFieldBlank {
		ObjectAdmin.openObjectAdmin();

		Click(locator1 = "ObjectAdmin#ADD_CUSTOM_OBJECT");

		Type(
			locator1 = "ObjectAdmin#PLURAL_LABEL_CUSTOM_OBJECT",
			value1 = "Custom Objects");

		Type(
			locator1 = "ObjectAdmin#NAME_CUSTOM_OBJECT",
			value1 = "CustomObject");

		ObjectAdmin.saveCustomObject();

		ObjectAdmin.assertObjectLabelFieldRequired();
	}

	@description = "LPS-135549 - Verify it is not possible to leave the Object Name field blank"
	@priority = "4"
	test CannotLeaveObjectNameFieldBlank {
		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.addNewObject(
			fieldLabelName = "Custom Field",
			fieldName = "",
			pluralLabelName = "Custom Fields");

		ObjectAdmin.saveCustomObject();

		ObjectAdmin.assertObjectNameFieldRequired();
	}

	@description = "LPS-136595 - Verify it is not possible to leave the Picklist field empty when creating an Object Picklist field"
	@ignore = "Test Stub"
	@priority = "4"
	test CannotLeavePicklistFieldEmpty {

		// TODO LPS-141595 CannotLeavePicklistFieldEmpty pending implementation

	}

	@description = "LPS-135400 - Verify it is not possible to leave the Relationship Name blank"
	@priority = "4"
	test CannotLeaveRelationshipNameBlank {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.gotoRelationshipsTab();

		ObjectAdmin.addObjectRelationshipViaUI(
			label = "Relationship",
			name = "",
			object = "CustomObject",
			type = "One to Many");

		AssertElementPresent(locator1 = "ObjectAdmin#NAME_OBJECT_RELATIONSHIP_REQUIRED");
	}

	@description = "LPS-135400 - Verify it is not possible to leave the Relationship Object blank"
	@priority = "4"
	test CannotLeaveRelationshipObjectBlank {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.gotoRelationshipsTab();

		ObjectAdmin.addObjectRelationshipViaUI(
			label = "Custom Relationship",
			type = "One to Many");

		AssertElementPresent(locator1 = "ObjectAdmin#SELECT_OBJECT_RELATIONSHIP_REQUIRED");
	}

	@description = "LPS-135400 - Verify it is not possible to leave the Relationship Type blank"
	@priority = "4"
	test CannotLeaveRelationshipTypeBlank {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.gotoRelationshipsTab();

		ObjectAdmin.addObjectRelationshipViaUI(
			label = "Relationship",
			object = "CustomObject");

		AssertElementPresent(locator1 = "ObjectAdmin#RELATIONSHIPS_TYPE_FORM_REQUIRED");
	}

	@description = "LPS-135549 - Verify it is not possible to leave the Type field blank"
	@priority = "4"
	test CannotLeaveTypeFieldBlank {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Custom Field",
			fieldType = "Choose an Option");

		ObjectAdmin.assertTypeFieldRequired();
	}

	@description = "LPS-135390 - Verify it is not possible to publish an Object without the Publish Object Definition permission"
	@priority = "4"
	test CannotPublishObjectWithouPublishPermission {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.definePermissionCP(
			permissionDefinitionKey = "CONTROL_PANEL_OBJECTS_PERMISSIONS_APLICATION_PERMISSION_ACCESS_CONTROL_PANEL_CHECKBOX",
			permissionDefinitionValue = "",
			permissionNavigationKey = "CONTROL_PANEL_OBJECTS_PERMISSIONS",
			permissionNavigationValue = "Objects",
			roleTitle = "Regular Role",
			roleType = "Regular");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.definePermissionCP(
			permissionDefinitionKey = "CONTROL_PANEL_OBJECTS_PERMISSIONS_RESOURCE_PERMISSION_VIEW_OBJECT_DEFINITION_CHECKBOX",
			permissionDefinitionValue = "",
			permissionNavigationKey = "CONTROL_PANEL_OBJECTS_PERMISSIONS",
			permissionNavigationValue = "Objects",
			roleTitle = "Regular Role",
			roleType = "Regular");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		Navigator.openURL();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.assertDisabledPublishObjectButton();
	}

	@description = "LPS-135549 - Verify it is not possible to save with the first character of the Object Name in lower case"
	@priority = "4"
	test CannotSaveLowerCaseObjectName {
		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.addNewObject(
			fieldLabelName = "Custom Object",
			fieldName = "customObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.saveCustomObject();

		ObjectAdmin.viewFieldErrorMessage(message = "The first character of a name must be an upper case letter.");
	}

	@description = "LPS-135549 - Verify it is not possible to save with special characters for the Field Name"
	@priority = "4"
	test CannotSaveSpecialCharacterFieldName {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Custom Field",
			fieldName = "customField#$%",
			fieldType = "Long");

		ObjectAdmin.viewFieldErrorMessage(message = "Name must only contain letters and digits.");
	}

	@description = "LPS-135549 - Verify it is not possible to save with the first character of the Field Name in upper case"
	@priority = "4"
	test CannotSaveUpperCaseFieldName {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Custom Field",
			fieldName = "CustomField",
			fieldType = "String");

		ObjectAdmin.viewFieldErrorMessage(message = "The first character of a name must be an lower case letter.");
	}

	@description = "LPS-135549 - Verify it is not possible to save with special characters for the Object Name"
	@priority = "4"
	test CannotSaveWithSpecialCharacterForObjectName {
		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.addNewObject(
			fieldLabelName = "ObjectTest1",
			pluralLabelName = "ObjectsTests1");

		Type(
			locator1 = "ObjectAdmin#NAME_CUSTOM_OBJECT",
			value1 = "ObjectTest@");

		ObjectAdmin.saveCustomObject();

		Alert.viewErrorMessage(errorMessage = "Name must only contain letters and digits");
	}

	@description = "LPS-135397 - Verify it is not possible to set a layout as default without all the required fields on the first tab"
	@priority = "4"
	test CannotSetLayoutDefaultWithoutAllRequiredFieldsOnFirstTab {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field Required",
			fieldName = "customObjectFieldRequired",
			fieldType = "String",
			isRequired = "true",
			objectName = "CustomObject");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field Not Required",
			fieldName = "customObjectFieldNotRequired",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout",
			objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		SelectFrame(locator1 = "IFrame#IFRAME");

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = "2",
			fieldLabelName = "Custom Field Not Required",
			tabName = "Field Tab");

		Click(locator1 = "ObjectAdmin#LAYOUT_INFO_TAB");

		Click.clickAtNotVisible(locator1 = "ObjectAdmin#ENTRY_BOOLEAN_CHECKBOX");

		Button.clickSave();

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR",
			value1 = "All required object fields must be associated to the first tab of a default object layout");
	}

	@description = "LPS-139005 - Verify that is not possible to submit entries in a form with an Object that was inactivated"
	@priority = "4"
	test CannotSubmitEntriesInFormAfterObjectInactivated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		PopulateObjectFormsConfiguration.openForm();

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		PopulateObjectFormsConfiguration.openFormSettings();

		PopulateObjectFormsConfiguration.selectObject(label = "Object");

		PopulateObjectFormsConfiguration.selectCustomObject(label = "Custom Object");

		Form.gotoAddField(fieldType = "Text");

		PopulateObjectFormsConfiguration.mapFormField(fieldLabelName = "Custom Field");

		Form.publishForm();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		PopulateObjectFormsConfiguration.openForm();

		AssertElementPresent(
			key_text = "exclamation-full",
			locator1 = "Icon#ANY");

		MouseOver(
			key_text = "exclamation-full",
			locator1 = "Icon#ANY");

		AssertElementPresent(locator1 = "PopulateObjectFormsConfiguration#ALERT_ICON_MESSAGE");

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Edit");

		FormsAdminNavigator.openPublishURL();

		FormFields.editText(
			fieldLabel = "Text",
			fieldName = "Text",
			fieldValue = "Entry 1");

		AssertClick(
			locator1 = "Button#MAIN_CONTENT_SUBMIT",
			value1 = "Submit");

		AssertElementNotPresent(locator1 = "Message#SUCCESS_DISMISSIBLE");
	}

	@description = "LPS-135400 - Verify it is not possible to submit an entry with a invalid value on the Relationship field"
	@ignore = "Test Stub"
	@priority = "4"
	test CannotSubmitEntryWithInvalidValueOnRelationshipField {

		// TODO LPS-141654 CannotSubmitEntryWithInvalidValueOnRelationshipField pending implementation

	}

	@description = "LPS-135635 - Verify it is not possible to update the Mandatory of a Field after the Object is published"
	@priority = "4"
	test CannotUpdateFieldMandatoryAfterPublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Custom Field");

		AssertElementPresent(locator1 = "ObjectAdmin#OBJECT_FIELDS_MANDATORY_TOGGLE_SWITCH_DISABLED");
	}

	@description = "LPS-135635 - Verify it is not possible to update the Name of a Field after the Object is published"
	@priority = "5"
	test CannotUpdateFieldNameAfterPublished {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Text",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Text");

		CreateObject.assertDisabledFieldName();
	}

	@description = "LPS-135635 - Verify it is not possible to update the Type of a Field after the Object is published"
	@priority = "4"
	test CannotUpdateFieldTypeAfterPublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Text",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Text");

		CreateObject.assertDisabledFieldType();
	}

	@description = "LPS-135635 - Verify it is not possible to update the Object name after it is published"
	@ignore = "true"
	@priority = "5"
	test CannotUpdateObjectNameAfterPublished {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.assertDisabledObjectName();
	}

	@description = "LPS-135635 - Verify it is not possible to update the Object scope after it is published"
	@priority = "4"
	test CannotUpdateObjectScopeAfterPublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		AssertElementPresent(locator1 = "CreateObject#VIEW_OBJECT_SCOPE_DISABLED");
	}

	@description = "LPS-135390 - Verify it is not possible to update an Object without the Update permission"
	@ignore = "Test Stub"
	@priority = "4"
	test CannotUpdateObjectWithUpdatePermission {

		// TODO LPS-141605 CannotUpdateObjectWithUpdatePermission pending implementation

	}

	@description = "LPS-135635 - Verify it is not possible to update the Searchable section after the Object is published"
	@priority = "4"
	test CannotUpdateSearchableSectionAfterPublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Text",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Text");

		AssertElementPresent(locator1 = "ObjectAdmin#VIEW_SEARCHABLE_SECTION_DISABLED");
	}

	@description = "LPS-135649 - Verify that the Object is not displayed on Process Builder settings before Published"
	@priority = "4"
	test CannotViewObjectOnProcessBuilderBeforePublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.openWorkflowProcessBuilderConfiguration();

		Workflow.viewDefinitionNotPresent(workflowDefinitionTitle = "Custom Object");
	}

	@description = "LPS-135649 - Verify that the Object is not not displayed on Workflow settings from Site Menu before Published"
	@priority = "4"
	test CannotViewObjectOnWorkflowSettingsSiteMenuBeforePublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		Workflow.openWorkflowAdmin(siteURLKey = "guest");

		Workflow.viewDefinitionNotPresent(workflowDefinitionTitle = "Custom Object");
	}

	@description = "LPS-135390 - Verify it is not possible to view an Object without the View permission"
	@ignore = "Test Stub"
	@priority = "4"
	test CannotViewObjectWithoutViewPermission {

		// TODO LPS-141607 CannotViewObjectWithoutViewPermission pending implementation

	}

	@description = "LPS-135549 - Verify it is possible to Publish a Custom Object"
	@ignore = "true"
	@priority = "5"
	test CanPublishCustomObject {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Not Required Field",
			fieldName = "date",
			fieldType = "Date",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.assertObjectStatus(
			label = "Custom Object",
			status = "Draft");

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.publishObjectViaUI();

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.assertObjectStatus(
			label = "Custom Object",
			status = "Approved");
	}

	@description = "LPS-135390 - Verify it is possible to publish an Object with the Publish Object Definition permission"
	@ignore = "Test Stub"
	@priority = "4"
	test CanPublishObjectWithPublishPermission {

		// TODO LPS-141602 CanPublishObjectWithPublishPermission pending implementation

	}

	@description = "LPS-135401 - Verify that it is possible to relate to many other entries on both objects"
	@ignore = "Test Stub"
	@priority = "5"
	test CanRelateManyOtherEntriesBothObjects {
		property portal.acceptance = "true";

		// TODO LPS-141662 CanRelateManyOtherEntriesBothObjects pending implementation

	}

	@description = "LPS-135551 - Verify it is possible to scope the Object by Company"
	@ignore = "true"
	@priority = "5"
	test CanScopeObjectByCompany {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			panelCategoryKey = "control_panel.account_entries_admin",
			pluralLabelName = "Custom Objects",
			scope = "company");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		Navigator.openURL();

		ApplicationsMenuHelper.openApplicationsMenu();

		ApplicationsMenu.gotoPanel(panel = "Control Panel");

		AssertElementPresent(locator1 = "ObjectPortlet#CUSTOM_OBJECT_ON_CONTROL_PANEL");
	}

	@description = "LPS-135551 - Verify it is possible to scope the Object by Site"
	@ignore = "true"
	@priority = "5"
	test CanScopeObjectBySite {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			panelCategoryKey = "site_administration.content",
			pluralLabelName = "Custom Objects",
			scope = "site");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		Navigator.openURL();

		ProductMenuHelper.openProductMenu();

		ProductMenuHelper.expandCategory(category = "Content & Data");

		AssertElementPresent(
			key_portlet = "Custom Objects",
			locator1 = "ProductMenu#PORTLET",
			value1 = "Custom Objects");
	}

	@description = "LPS-135547 - Verify it is possible to search for a Custom Object"
	@ignore = "Test Stub"
	@priority = "4"
	test CanSearchForCustomObject {

		// TODO LPS-141638 CanSearchForCustomObject pending implementation

	}

	@description = "LPS-135547 - Verify it is possible to search for a field from a Custom Object"
	@ignore = "Test Stub"
	@priority = "4"
	test CanSearchForFieldCustomObject {

		// TODO LPS-141641 CanSearchForFieldCustomObject pending implementation

	}

	@description = "LPS-135547 - Verify it is possible to search for a field from a System Object"
	@ignore = "Test Stub"
	@priority = "4"
	test CanSearchForFieldSystemObject {

		// TODO LPS-141642 CanSearchForFieldSystemObject pending implementation

	}

	@description = "LPS-135547 - Verify it is possible to search for a System Object"
	@ignore = "Test Stub"
	@priority = "4"
	test CanSearchForSystemObject {

		// TODO LPS-141639 CanSearchForSystemObject pending implementation

	}

	@description = "LPS-139803 - Verify it is possible to search for the Object Entry Title on the Relationship field"
	@ignore = "Test Stub"
	@priority = "4"
	test CanSearchObjectEntryTitleOnRelationshipField {

		// TODO LPS-141618 CanSearchObjectEntryTitleOnRelationshipField pending implementation

	}

	@description = "LPS-135397 - Verify if it's possible to set the block as Collapsible"
	@priority = "4"
	test CanSetBlockCollapsible {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.goToLayoutTabOnLayouts();

		ObjectAdmin.addTabFieldsOnLayout(tabName = "Field Tab");

		ObjectAdmin.addLayoutBlockViaUI(blockName = "Block Name");

		CreateObject.checkToggleCollapsible();

		CreateObject.assertToggleCollapsibleChecked();
	}

	@description = "LPS-135389 - Verify it is possible to set a different language value for a Field Label"
	@priority = "4"
	test CanSetDifferentLanguageForFieldLabel {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Custom Field");

		ObjectAdmin.changeLabelLanguage(newLanguage = "pt-BR");

		CreateObject.editLabel(labelName = "Campo Customizado");

		Button.clickSave();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		MyAccount.configureDisplaySettingsLanguage(languageName = "português (Brasil)");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		LexiconEntry.gotoAdd();

		ObjectPortlet.assertFieldLabelName(fieldLabelName = "Campo Customizado");
	}

	@description = "LPS-135389 - Verify it is possible to set a different language value for an Object Label"
	@priority = "5"
	test CanSetDifferentLanguageForObjectLabel {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.changeLabelLanguage(newLanguage = "pt-BR");

		CreateObject.editLabel(labelName = "Objeto Costumizado");

		CreateObject.editPluralLabel(pluralLabelName = "Objetos Costumizados");

		CreateObject.saveObject();

		MyAccount.configureDisplaySettingsLanguage(languageName = "português (Brasil)");

		ObjectAdmin.openObjectAdmin();

		CreateObject.assertCustomObject(labelName = "Objeto Costumizado");
	}

	@description = "LPS-135389 - Verify it is possible to set a different language value for an Object Plural Label"
	@priority = "4"
	test CanSetDifferentLanguageForObjectPluralLabel {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.changePluralLabelLanguage(newLanguage = "pt-BR");

		CreateObject.editLabel(labelName = "Objeto Customizado");

		CreateObject.editPluralLabel(pluralLabelName = "Objetos Customizados");

		CreateObject.saveObject();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		MyAccount.configureDisplaySettingsLanguage(languageName = "português (Brasil)");

		Navigator.openURL();

		ApplicationsMenuHelper.openApplicationsMenu();

		ApplicationsMenu.gotoPanel(panel = "Painel de Controle");

		AssertElementPresent(
			key_category = "Objeto",
			key_portlet = "Objetos Customizados",
			locator1 = "ApplicationsMenu#PORTLET");
	}

	@description = "LPS-135549 - Verify it is possible to set a field as Mandatory"
	@priority = "4"
	test CanSetFieldMandatory {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Custom Field",
			fieldType = "String",
			isMandatory = "true");

		ObjectAdmin.goToFieldsDetails(label = "Custom Field");

		CreateObject.assertToggleMandatory();
	}

	@description = "LPS-139005 - Verify that is possible to submit entries in a form with an Object that was reactivated"
	@priority = "4"
	test CanSubmitEntriesOnFormWhenReactivated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		PopulateObjectFormsConfiguration.openForm();

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		PopulateObjectFormsConfiguration.openFormSettings();

		PopulateObjectFormsConfiguration.selectObject(label = "Object");

		PopulateObjectFormsConfiguration.selectCustomObject(label = "Custom Object");

		Form.gotoAddField(fieldType = "Text");

		PopulateObjectFormsConfiguration.mapFormField(fieldLabelName = "Custom Field");

		Form.save();

		Form.publishForm();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.checkToggleActive();

		CreateObject.saveObject();

		Navigator.openURL();

		PopulateObjectFormsConfiguration.openForm();

		AssertElementNotPresent(
			key_text = "exclamation-full",
			locator1 = "Icon#ANY");

		FormsAdminNavigator.gotoEditFormByName(formName = "Form 1");

		FormsAdminNavigator.openPublishURL();

		FormFields.editText(
			fieldLabel = "Text",
			fieldName = "Text",
			fieldValue = "Entry 1");

		FormPortlet.submitSuccessfully();

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "Entry 1");
	}

	@description = "LPS-135397 - Verify if it's possible to update a Custom Layout Created"
	@priority = "4"
	test CanUpdateCustomLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout",
			objectName = "CustomObject");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		SelectFrame(locator1 = "IFrame#IFRAME");

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = "2",
			fieldLabelName = "Custom Field",
			tabName = "Field Tab");

		Click(locator1 = "ObjectAdmin#LAYOUT_INFO_TAB");

		Type(
			locator1 = "ObjectAdmin#LAYOUT_BASIC_INFO_NAME_FIELD",
			value1 = "Layout Updated");

		Button.clickSave();

		Refresh();

		AssertTextEquals(
			key_name = "Layout Updated",
			locator1 = "ObjectAdmin#TABLE_LIST_TITLE",
			value1 = "Layout Updated");
	}

	@description = "LPS-135635 - Verify it is possible to update the Label of a Field after the Object is published"
	@priority = "5"
	test CanUpdateFieldLabelAfterPublished {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Text",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Text");

		CreateObject.editLabel(labelName = "Text Update");

		CreateObject.saveObject();

		Refresh();

		ObjectAdmin.goToFieldsDetails(label = "Text Update");

		CreateObject.assertObjectLabel(labelName = "Text Update");
	}

	@description = "LPS-135635 - Verify it is possible to update the Label of a Field before the Object is published"
	@priority = "5"
	test CanUpdateFieldLabelBeforePublished {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Text",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Text");

		CreateObject.editLabel(labelName = "Text Update");

		CreateObject.saveObject();

		Refresh();

		ObjectAdmin.goToFieldsDetails(label = "Text Update");

		CreateObject.assertObjectLabel(labelName = "Text Update");
	}

	@description = "LPS-135635 - Verify it is possible to update the Mandatory of a Field before the Object is published"
	@priority = "4"
	test CanUpdateFieldMandatoryBeforePublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Text",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Text");

		CreateObject.toggleMandatory();

		CreateObject.saveObject();

		Refresh();

		ObjectAdmin.goToFieldsDetails(label = "Text");

		CreateObject.checkToggleMandatory();
	}

	@description = "LPS-135635 - Verify it is possible to update the Name of a Field before the Object is published"
	@priority = "4"
	test CanUpdateFieldNameBeforePublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Text",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Text");

		CreateObject.editName(fieldName = "customObjectFieldUpdate");

		CreateObject.saveObject();

		Refresh();

		ObjectAdmin.goToFieldsDetails(label = "Text");

		CreateObject.assertFieldName(fieldName = "customObjectFieldUpdate");
	}

	@description = "LPS-135635 - Verify it is possible to update the Searchable section before the Object is published"
	@priority = "4"
	test CanUpdateFieldSearchableSectionBeforePublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Text",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Text");

		ObjectAdmin.clickFieldsSearchableSectionRadioOption(radioOption = "Text");

		CreateObject.saveObject();

		Refresh();

		ObjectAdmin.goToFieldsDetails(label = "Text");

		ObjectAdmin.viewFieldSearchableSectionLanguage();
	}

	@description = "LPS-135635 - Verify it is possible to update the Type of a Field before the Object is published"
	@priority = "4"
	test CanUpdateFieldTypeBeforePublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Text",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Text");

		CreateObject.editType(fieldType = "Date");

		CreateObject.saveObject();

		Refresh();

		ObjectAdmin.goToFieldsDetails(label = "Text");

		CreateObject.assertFieldType(fieldType = "Date");
	}

	@description = "LPS-135635 - Verify it is possible to update the Object label after it is published"
	@priority = "4"
	test CanUpdateObjectLabelAfterPublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		CreateObject.viewObject(labelName = "Custom Object");

		CreateObject.editLabel(labelName = "Update Custom Object");

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		CreateObject.viewObject(labelName = "Custom Object");

		CreateObject.assertObjectLabel(labelName = "Update Custom Object");
	}

	@description = "LPS-135635 - Verify it is possible to update the Object label before it is published"
	@priority = "5"
	test CanUpdateObjectLabelBeforePublished {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.editLabel(labelName = "Update Custom Object");

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.assertObjectLabel(labelName = "Update Custom Object");
	}

	@description = "LPS-135635 - Verify it is possible to update the Object name before it is published"
	@priority = "4"
	test CanUpdateObjectNameBeforePublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.editCustomObject(fieldName = "CustomObject2");

		Navigator.gotoBack();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		AssertTextEquals(
			locator1 = "ObjectAdmin#DETAILS_NAME_CUSTOM_OBJECT",
			value1 = "CustomObject2");
	}

	@description = "LPS-135635 - Verify it is possible to update the Object panel category key before it is published"
	@priority = "4"
	test CanUpdateObjectPanelCategoryBeforePublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.selectPanelCategoryKey(panelCategoryKey = "Control Panel > Users");

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.assertPanelCategoryKey(panelCategoryKey = "Control Panel > Users");
	}

	@description = "LPS-135635 - Verify it is possible to update the Object panel category key after it is published"
	@priority = "4"
	test CanUpdateObjectPanelCategoryKeyAfterPublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.selectPanelCategoryKey(panelCategoryKey = "Control Panel > Users");

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.assertPanelCategoryKey(panelCategoryKey = "Control Panel > Users");
	}

	@description = "LPS-135635 - Verify it is possible to update the Object plural label after it is published"
	@priority = "4"
	test CanUpdateObjectPluralLabelAfterPublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		CreateObject.viewObject(labelName = "Custom Object");

		CreateObject.editPluralLabel(pluralLabelName = "Update Plural Label Custom Object");

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		CreateObject.viewObject(labelName = "Custom Object");

		CreateObject.assertObjectPluralLabel(pluralLabelName = "Update Plural Label Custom Object");
	}

	@description = "LPS-135635 - Verify it is possible to update the Object plural label before it is published"
	@priority = "4"
	test CanUpdateObjectPluralLabelBeforePublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.editPluralLabel(pluralLabelName = "Update Plural Label Custom Object");

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.assertObjectPluralLabel(pluralLabelName = "Update Plural Label Custom Object");
	}

	@description = "LPS-135635 - Verify it is possible to update the Object scope before it is published"
	@priority = "4"
	test CanUpdateObjectScopeBeforePublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.selectObjectScope(fieldOption = "Site");

		Button.clickSave();

		Navigator.gotoBack();

		ObjectPortlet.viewEntry(entry = "site");
	}

	@description = "LPS-135390 - Verify it is possible to update an Object with the Update permission"
	@ignore = "Test Stub"
	@priority = "4"
	test CanUpdateObjectWithUpdatePermission {

		// TODO LPS-141606 CanUpdateObjectWithUpdatePermission pending implementation

	}

	@description = "LPS-135400 - Verify it is possible to update a Relationship"
	@priority = "5"
	test CanUpdateRelationship {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject",
			objectName_2 = "CustomObject",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.gotoRelationshipsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		SelectFrame(locator1 = "IFrame#IFRAME");

		CreateObject.editLabel(labelName = "Relationship Updated");

		Button.clickSave();

		Refresh();

		AssertTextEquals(
			key_label = "Relationship Updated",
			locator1 = "ObjectAdmin#RELATIONSHIP_LABEL",
			value1 = "Relationship Updated");
	}

	@description = "LPS-140342 - Verify it is possible to view and edit its own Object with only the Add Object Definition permission"
	@ignore = "Test Stub"
	@priority = "4"
	test CanViewAndEditObjectWithAddObjectPermission {

		// TODO LPS-141688 CanViewAndEditObjectWithAddObjectPermission pending implementation

	}

	@description = "LPS-135397 - Verify if it's possible to view Entries with Custom Layout Created"
	@priority = "4"
	test CanViewEntriesWithCustomLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout",
			objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		SelectFrame(locator1 = "IFrame#IFRAME");

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = "1",
			fieldLabelName = "Custom Field",
			tabName = "Field Tab");

		Click(locator1 = "ObjectAdmin#LAYOUT_INFO_TAB");

		Click.clickAtNotVisible(locator1 = "ObjectAdmin#ENTRY_BOOLEAN_CHECKBOX");

		Button.clickSave();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "Entry 1");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		AssertElementPresent(
			key_tabName = "Field Tab",
			locator1 = "ObjectAdmin#ANY_TAB_ON_ENTRY");

		AssertElementPresent(
			key_labelName = "Block 1",
			locator1 = "ObjectAdmin#LABEL_FIELD_GROUP_TITLE");

		AssertElementPresent(
			key_labelName = "Custom Field",
			locator1 = "ObjectAdmin#LABEL_FIELD_ENTRY");

		AssertElementPresent(
			key_text = "Save",
			locator1 = "Button#ANY");

		AssertElementPresent(
			key_text = "Cancel",
			locator1 = "Button#ANY");
	}

	@description = "LPS-135397 - Verify if it's possible to view the Entry with one column"
	@ignore = "Test Stub"
	@priority = "4"
	test CanViewEntryWithOneColumn {

		// TODO LPS-141511 CanViewEntryWithOneColumn pending implementation

	}

	@description = "LPS-135397 - Verify if it's possible to view the Entry with three columns"
	@priority = "4"
	test CanViewEntryWithThreeColumns {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		for (var letter : list "A,B,C") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldLabelName = "Custom Field ${letter}",
				fieldName = "customObjectField${letter}",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject");
		}

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout",
			objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		SelectFrame(locator1 = "IFrame#IFRAME");

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = "3",
			fieldList = "Custom Field A,Custom Field B,Custom Field C",
			tabName = "Field Tab");

		Click(locator1 = "ObjectAdmin#LAYOUT_INFO_TAB");

		Click.clickAtNotVisible(locator1 = "ObjectAdmin#ENTRY_BOOLEAN_CHECKBOX");

		Button.clickSave();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		LexiconEntry.gotoAdd();

		ObjectPortlet.assertFieldAtSpecificColumn(
			fieldColumnNumber = "0",
			fieldLabel = "Custom Field A");

		ObjectPortlet.assertFieldAtSpecificColumn(
			fieldColumnNumber = "1",
			fieldLabel = "Custom Field B");

		ObjectPortlet.assertFieldAtSpecificColumn(
			fieldColumnNumber = "2",
			fieldLabel = "Custom Field C");
	}

	@description = "LPS-135397 - Verify if it's possible to view the Entry with two columns"
	@priority = "5"
	test CanViewEntryWithTwoColumns {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		for (var letter : list "A,B") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldLabelName = "Custom Field ${letter}",
				fieldName = "customObjectField${letter}",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject");
		}

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout",
			objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		SelectFrame(locator1 = "IFrame#IFRAME");

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = "2",
			fieldList = "Custom Field A,Custom Field B",
			tabName = "Field Tab");

		Click(locator1 = "ObjectAdmin#LAYOUT_INFO_TAB");

		Click.clickAtNotVisible(locator1 = "ObjectAdmin#ENTRY_BOOLEAN_CHECKBOX");

		Button.clickSave();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		LexiconEntry.gotoAdd();

		AssertElementPresent(
			key_fieldColumnNumber = "0",
			key_fieldLabel = "Custom Field A",
			locator1 = "ObjectAdmin#FIELD_COLUMN_POSITION_ON_ENTRY_PAGE");

		AssertElementPresent(
			key_fieldColumnNumber = "1",
			key_fieldLabel = "Custom Field B",
			locator1 = "ObjectAdmin#FIELD_COLUMN_POSITION_ON_ENTRY_PAGE");
	}

	@description = "LPS-135400 - There is an explanation about each Relationship type"
	@priority = "3"
	test CanViewExplanationRelationshipTypes {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.gotoRelationshipsTab();

		LexiconEntry.gotoAdd();

		Click(locator1 = "ObjectAdmin#RELATIONSHIPS_TYPE_FORM");

		ObjectAdmin.assertRelationshipsTypeDescription(
			description = "One object's entry interacts with many others object's entries.",
			type = "One to Many");

		ObjectAdmin.assertRelationshipsTypeDescription(
			description = "Multiple object's entries can interact with many others object's entries.",
			type = "Many to Many");
	}

	@description = "LPS-135549 - Verify it is possible to view the Details of a Field by clicking on the eye icon"
	@priority = "4"
	test CanViewFieldsDetailsByClickingEyeIcon {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.viewFieldDetails();
	}

	@description = "LPS-135549 - Verify it is possible to view the Details of a Field by clicking on its name"
	@priority = "4"
	test CanViewFieldsDetailsByClickingName {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "CustomObject",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "CustomObject");

		AssertElementPresent(locator1 = "ObjectAdmin#FIELDS_DETAILS_IFRAME");
	}

	@description = "LPS-139803 - Verify it the Object Entry Title of a BigDecimal type is displayed on the Relationship field when adding an entry"
	@priority = "4"
	test CanViewObjectEntryTitleBigDecimalOnRelationshipField {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "BigDecimal",
			fieldName = "customObjectField",
			fieldType = "BigDecimal",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject",
			objectName_2 = "CustomObject",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.selectTitleField(fieldLabel = "BigDecimal");

		Button.clickSave();

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "123.123456");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		CreateObject.assertAddedEntryRelationshipIsDisplayed(entry = "123.123456");
	}

	@description = "LPS-139803 - Verify it the Object Entry Title of a Boolean type is displayed on the Relationship field when adding an entry"
	@priority = "4"
	test CanViewObjectEntryTitleBooleanOnRelationshipField {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Boolean",
			fieldName = "customObjectField",
			fieldType = "Boolean",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject",
			objectName_2 = "CustomObject",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.selectTitleField(fieldLabel = "Boolean");

		Button.clickSave();

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "true");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		CreateObject.assertAddedEntryRelationshipIsDisplayed(entry = "true");
	}

	@description = "LPS-139803 - Verify it the Object Entry Title of a Date type is displayed on the Relationship field when adding an entry"
	@priority = "4"
	test CanViewObjectEntryTitleDateOnRelationshipField {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Date",
			fieldName = "customObjectField",
			fieldType = "Date",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject",
			objectName_2 = "CustomObject",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.selectTitleField(fieldLabel = "Date");

		Button.clickSave();

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "2021-01-01");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		CreateObject.assertAddedEntryRelationshipIsDisplayed(entry = "2021-01-01");
	}

	@description = "LPS-139803 - Verify it the Object Entry Title of a Double type is displayed on the Relationship field when adding an entry"
	@ignore = "Test Stub"
	@priority = "4"
	test CanViewObjectEntryTitleDoubleOnRelationshipField {

		// TODO LPS-141614 CanViewObjectEntryTitleDoubleOnRelationshipField pending implementation

	}

	@description = "LPS-139803 - Verify it the Object Entry Title of a Integer type is displayed on the Relationship field when adding an entry"
	@priority = "4"
	test CanViewObjectEntryTitleIntegerOnRelationshipField {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Integer",
			fieldName = "customObjectField",
			fieldType = "Integer",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject",
			objectName_2 = "CustomObject",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.selectTitleField(fieldLabel = "Integer");

		Button.clickSave();

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "123");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		CreateObject.assertAddedEntryRelationshipIsDisplayed(entry = "123");
	}

	@description = "LPS-139803 - Verify it the Object Entry Title of a Long type is displayed on the Relationship field when adding an entry"
	@priority = "4"
	test CanViewObjectEntryTitleLongOnRelationshipField {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Long",
			fieldName = "customObjectField",
			fieldType = "Long",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject",
			objectName_2 = "CustomObject",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.selectTitleField(fieldLabel = "Long");

		Button.clickSave();

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "12345678912345678");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		CreateObject.assertAddedEntryRelationshipIsDisplayed(entry = "12345678912345678");
	}

	@description = "LPS-139803 - Verify it the Object Entry Title is displayed on the Item Selector of a fragment on a Display Page"
	@priority = "4"
	test CanViewObjectEntryTitleOnItemSelectorFragment {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.selectTitleField(fieldLabel = "Custom Field");

		CreateObject.saveObject();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "Test Entry");

		Navigator.openURL();

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "guest");

		DisplayPageTemplatesAdmin.addDisplayPage(
			contentType = "Custom Object",
			displayPageName = "Blank Display Page",
			subtype = "Custom Object");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		VisualizeObjectCollectionDisplay.openHeading();

		VisualizeObjectCollectionDisplay.mapFragment(fieldLabel = "Custom Field");

		VisualizeObjectCollectionDisplay.viewMappedFragment(fieldLabel = "Custom Field");

		PageEditor.selectItemToPreviewWithObject(objectLabel = "Custom Object");

		VisualizeObjectDisplayPage.assertDisplayEntry(entry = "Test Entry");
	}

	@description = "LPS-139803 - Verify it the Object Entry Title is displayed on the Relationship tab"
	@ignore = "Test Stub"
	@priority = "4"
	test CanViewObjectEntryTitleOnRelationshipTab {

		// TODO LPS-141620 CanViewObjectEntryTitleOnRelationshipTab pending implementation

	}

	@description = "LPS-139803 - Verify if the Object Entry Title is displayed for Object entries on workflow pages (My Workflow Tasks, My Submissions, and Submissions)"
	@ignore = "Test Stub"
	@priority = "4"
	test CanViewObjectEntryTitleOnWorkflowPages {

		// TODO LPS-141624 CanViewObjectEntryTitleOnWorkflowPages pending implementation

	}

	@description = "LPS-139803 - Verify it the Object Entry Title of a Picklist type is displayed on the Relationship field when adding an entry"
	@ignore = "Test Stub"
	@priority = "4"
	test CanViewObjectEntryTitlePicklistOnRelationshipField {

		// TODO LPS-141617 CanViewObjectEntryTitlePicklistOnRelationshipField pending implementation

	}

	@description = "LPS-139803 - Verify if the Object Entry Title is displayed when selecting to preview an object entry on a Page Template"
	@ignore = "Test Stub"
	@priority = "4"
	test CanViewObjectEntryTitlePreviewOnPageTemplate {

		// TODO LPS-141623 CanViewObjectEntryTitlePreviewOnPageTemplate pending implementation

	}

	@description = "LPS-139803 - Verify it the Object Entry Title of a String type is displayed on the Relationship field when adding an entry"
	@priority = "5"
	test CanViewObjectEntryTitleStringOnRelationshipField {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject",
			objectName_2 = "CustomObject",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.selectTitleField(fieldLabel = "Custom Field");

		CreateObject.saveObject();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "Entry 1");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		CreateObject.assertAddedEntryRelationshipIsDisplayed(entry = "Entry 1");
	}

	@description = "LPS-135549 - Verify it is possible to view the Details of an Object by clicking on the eye icon"
	@priority = "4"
	test CanViewObjectsDetailsByClickingEyeIcon {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.assertObjectDetailsPage();
	}

	@description = "LPS-135549 - Verify it is possible to view the Details of an Object by clicking on its name"
	@priority = "4"
	test CanViewObjectsDetailsByClickingName {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.assertObjectDetailsPage();
	}

	@description = "LPS-135390 - Verify it is possible to view an Object with the View permission"
	@ignore = "Test Stub"
	@priority = "4"
	test CanViewObjectWithViewPermission {

		// TODO LPS-141608 CanViewObjectWithViewPermission pending implementation

	}

	@description = "LPS-135400 - Verify it is possible to view a Relationship"
	@priority = "5"
	test CanViewRelationship {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject",
			objectName_2 = "CustomObject",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.gotoRelationshipsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.viewFieldDetails();
	}

	@description = "LPS-135397 - Verify if it's possible to view a tab of relationship with entries"
	@priority = "5"
	test CanViewRelationshipTab {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject",
			objectName_2 = "CustomObject",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout",
			objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		SelectFrame(locator1 = "IFrame#IFRAME");

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = "2",
			fieldLabelName = "Custom Field",
			tabName = "Field Tab");

		ObjectAdmin.addTabRelationshipsOnLayout(
			relationshipsLabelName = "Relationship",
			tabName = "Relationship Tab");

		Click(locator1 = "ObjectAdmin#LAYOUT_INFO_TAB");

		Click.clickAtNotVisible(locator1 = "ObjectAdmin#ENTRY_BOOLEAN_CHECKBOX");

		Button.clickSave();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "Entry 1");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		Click(
			key_tabName = "Relationship Tab",
			locator1 = "ObjectAdmin#ANY_TAB_ON_ENTRY");

		AssertElementPresent(
			key_tabName = "Relationship Tab",
			locator1 = "ObjectAdmin#ANY_TAB_ON_ENTRY");
	}

	@description = "LPS-135401 - Verify if Cascade deletion type of Relationship Many to Many will allow to delete only the entry with relation but not its relations"
	@ignore = "Test Stub"
	@priority = "4"
	test CascadeDeletionManyToManyWillAllowDelete {

		// TODO LPS-141670 CascadeDeletionManyToManyWillAllowDelete pending implementation

	}

	@description = "LPS-135401 - Verify if Cascade deletion type of Relationship One to Many will allow the entry with relation (from the child Object) to be deleted but not its relation"
	@ignore = "Test Stub"
	@priority = "4"
	test CascadeDeletionOneToManyWillAllowDeleteChild {

		// TODO LPS-141672 CascadeDeletionOneToManyWillAllowDeleteChild pending implementation

	}

	@description = "LPS-135401 - Verify if Cascade deletion type of Relationship One to Many will allow the entry with relation (from the parent Object) and its relations to be deleted"
	@ignore = "Test Stub"
	@priority = "5"
	test CascadeDeletionOneToManyWillAllowDeleteParent {
		property portal.acceptance = "true";

		// TODO LPS-141671 CascadeDeletionOneToManyWillAllowDeleteParent pending implementation

	}

	@description = "LPS-135401 - Verify that when adding an entry that was already related to another it will keep related to both entries"
	@ignore = "Test Stub"
	@priority = "4"
	test ChoosingAlreadyRelatedEntryWillKeepOnBothEntries {

		// TODO LPS-141663 ChoosingAlreadyRelatedEntryWillKeepOnBothEntries pending implementation

	}

	@description = "LPS-135549 - Verify that the columns Name and Type are displayed for the Fields table"
	@priority = "4"
	test ColumnsAreDisplayedFieldsTable {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.assertFieldsTableColumnsAreDisplayed();
	}

	@description = "LPS-135549 - Verify that the columns Name, System and Status are displayed for the Objects table"
	@priority = "4"
	test ColumnsAreDisplayedObjectsTable {
		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.assertObjectColumnsAreDisplayed();
	}

	@description = "LPS-135649 - Verify that a completed entry is displayed with an Approved status"
	@priority = "5"
	test CompletedEntryDisplaysApprovedStatus {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openWorkflowProcessBuilderConfiguration();

		Workflow.configureWorkflow(
			workflowDefinition = "Single Approver",
			workflowResourceValue = "Custom Object");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "Entry 1");

		ObjectAdmin.openMyWorkflowTasks();

		Navigator.gotoNavTab(navTab = "Assigned to My Roles");

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Assign to Me");

		Workflow.confirmWorkflowAction();

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Approve");

		Workflow.confirmWorkflowAction();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.assertEntryStauts(
			key_entry = "Entry 1",
			key_status = "Approved");
	}

	@description = "LPS-135401 - Verify if Disassociate deletion type of Relationship Many to Many will allow the entry with relation to be deleted and its relations to be disassociated"
	@ignore = "Test Stub"
	@priority = "4"
	test DisassociateDeletionManyToManyWillAllowDelete {

		// TODO LPS-141675 DisassociateDeletionManyToManyWillAllowDelete pending implementation

	}

	@description = "LPS-135401 - Verify if Disassociate deletion type of Relationship One to Many will allow the entry with relation (from the child Object) to be deleted and its relation to be disassociated"
	@ignore = "Test Stub"
	@priority = "4"
	test DisassociateDeletionOneToManyWillAllowDeleteChild {

		// TODO LPS-141677 DisassociateDeletionOneToManyWillAllowDeleteChild pending implementation

	}

	@description = "LPS-135401 - Verify if Disassociate deletion type of Relationship One to Many will allow the entry with relation (from the parent Object) to be deleted and its relations to be disassociated"
	@priority = "5"
	test DisassociateDeletionOneToManyWillAllowDeleteParent {
		property portal.acceptance = "true";

		for (var nameObject : list "A,B") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object ${nameObject}",
				objectName = "CustomObject${nameObject}",
				pluralLabelName = "Custom Objects ${nameObject}");
		}

		for (var nameField : list "A,B") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldLabelName = "Custom Field ${nameField}",
				fieldName = "customObjectField${nameField}",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject${nameField}");
		}

		ObjectAdmin.addObjectRelationshipViaAPI(
			deletionType = "disassociate",
			objectName_1 = "CustomObjectA",
			objectName_2 = "CustomObjectB",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object A");

		CreateObject.selectTitleField(fieldLabel = "Custom Field A");

		Button.clickSave();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectA");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectB");

		for (var nameEntry : list "A,B") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField${nameEntry}",
				objectName = "CustomObject${nameEntry}",
				value = "Entry ${nameEntry}");
		}

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectB");

		ObjectPortlet.viewEntryDetails(entry = "Entry B");

		ObjectPortlet.chooseEntryOnRelationshipField(entryOption = "Entry A");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectA");

		ObjectPortlet.deleteEntry(entry = "Entry A");

		ObjectPortlet.assertEntryNotPresent(entry = "Entry A");

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectB");

		ObjectPortlet.viewEntryDetails(entry = "Entry B");

		ObjectPortlet.assertEntryOnRelationshipFieldNotPresent(customObject = "Entry A");
	}

	@description = "LPS-135547 - Verify the empty state when searching for an Object returns nothing"
	@ignore = "Test Stub"
	@priority = "3"
	test EmptyStateNoResultObject {

		// TODO LPS-141637 EmptyStateNoResultObject pending implementation

	}

	@description = "LPS-135547 - Verify the empty state when searching for an Object field returns nothing"
	@ignore = "Test Stub"
	@priority = "3"
	test EmptyStateNoResultObjectField {

		// TODO LPS-141640 EmptyStateNoResultObjectField pending implementation

	}

	@description = "LPS-135400 - Verify the empty state message when there is no Relationship"
	@priority = "3"
	test EmptyStateWhenNoRelationship {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.gotoRelationshipsTab();

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "No items were found.");
	}

	@description = "LPS-135549 - Verify that the Field Name is autofilled when Label is filled"
	@priority = "4"
	test FieldNameIsAutofilled {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		CreateObject.assertObjectFieldNameIsAutofilled(
			fieldLabel = "Custom Field",
			fieldName = "customField");
	}

	@description = "LPS-135397 - Verify if it's not possible to add a Field without Choose an Option Field"
	@priority = "4"
	test FieldOptionRequired {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.goToLayoutTabOnLayouts();

		ObjectAdmin.addTabFieldsOnLayout(tabName = "Field Tab");

		ObjectAdmin.addLayoutBlockViaUI(blockName = "Block Name");

		ObjectAdmin.assertNotPossibleAddFieldOnBlockWithoutChooseOptionField();
	}

	@description = "LPS-140097 - Verify that other fields are not deleted when a Relationship field is deleted after a Relationship is deleted"
	@ignore = "Test Stub"
	@priority = "4"
	test FieldsAreNotDeletedWhenRelationshipDeleted {

		// TODO LPS-141687 FieldsAreNotDeletedWhenRelationshipDeleted pending implementation

	}

	@description = "LPS-137874 - Verify that Objects created on a Virtual Instance are not displayed on the Forms Settings, Collection Providers and Display Page Template of the Main Instance and vice versa"
	@ignore = "Test Stub"
	@priority = "4"
	test FormCollectionProvidersDisplayPageDisplayOnlyItsInstanceObjects {

		// TODO LPS-141684 FormCollectionProvidersDisplayPageDisplayOnlyItsInstanceObjects pending implementation

	}

	@description = "LPS-135635 - Verify that the options Keyword and Text appears under the Searchable section when updating the field type to String"
	@priority = "4"
	test KeywordAndTextAppearsWhenUpdateFieldType {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Integer",
			fieldName = "customObjectField",
			fieldType = "Integer",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Integer");

		CreateObject.editType(fieldType = "String");

		CreateObject.assertSearchableSectionOptionsAppears(radioOption = "Keyword");

		CreateObject.assertSearchableSectionOptionsAppears(radioOption = "Text");
	}

	@description = "LPS-135635 - Verify that the options Keyword and Text disappears under the Searchable section when updating the field type from String to another type"
	@ignore = "Test Stub"
	@priority = "4"
	test KeywordAndTextDisappearsWhenUpdateFieldType {

		// TODO LPS-138852 KeywordAndTextDisappearsWhenUpdateFieldType pending implementation

	}

	@description = "LPS-135549 - Verify that the field with String type has the options Keyword and Text under the Searchable section"
	@priority = "4"
	test KeywordAndTextDisplayedForStringTypeField {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Custom Field");

		ObjectAdmin.assertKeywordAndText();
	}

	@description = "LPS-135549 - Verify that the field with String type has the option Language when the Text option is selected under the Searchable section"
	@priority = "4"
	test LanguageDisplayedForTextOption {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Custom Field");

		ObjectAdmin.clickFieldsSearchableSectionRadioOption(radioOption = "Text");

		ObjectAdmin.viewFieldSearchableSectionLanguage();
	}

	@description = "LPS-137741 - Verify that Objects created on a Virtual Instance are not displayed on the Object Admin of the Main Instance and vice versa"
	@ignore = "Test Stub"
	@priority = "4"
	test ObjectAdminDisplaysOnlyItsInstanceObjects {

		// TODO LPS-141682 ObjectAdminDisplaysOnlyItsInstanceObjects pending implementation

	}

	@description = "LPS-139005 - Verify that the Object is no longer displayed on the Collection Providers when inactivated"
	@priority = "4"
	test ObjectDisappearsCollectionProvidersWhenInactivated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		VisualizeObjectCollectionDisplay.openObjectCollectionProvider();

		AssertElementNotPresent(
			key_labelName = "Custom Objects",
			locator1 = "VisualizeObjectCollectionDisplay#VIEW_OBJECT_COLLECTION_DISPLAY");
	}

	@description = "LPS-139005 - Verify that the Object is no longer displayed on the Form's storage type when inactivated"
	@priority = "4"
	test ObjectDisappearsFormStorageSettingsWhenInactivated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		PopulateObjectFormsConfiguration.openForm();

		FormsAdminNavigator.gotoAddForm();

		PopulateObjectFormsConfiguration.openFormSettings();

		PopulateObjectFormsConfiguration.selectObject(label = "Object");

		Click(locator1 = "PopulateObjectFormsConfiguration#DEFAULT_SELECT_OBJECT");

		AssertElementNotPresent(
			key_label = "Custom Object",
			locator1 = "PopulateObjectFormsConfiguration#DISPLAY_SELECT_OBJECT");
	}

	@description = "LPS-139005 - Verify that the Object is no longer displayed on the Page Item Selector when inactivated"
	@priority = "4"
	test ObjectDisappearsPageItemSelectWhenInactivated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		Navigator.openURL();

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		VisualizeObjectCollectionDisplay.openHeading();

		Click.javaScriptClick(locator1 = "VisualizeObjectDisplayPage#SELECT_ITEM");

		SelectFrame(
			key_title = "Select",
			locator1 = "IFrame#MODAL_ANY");

		AssertElementNotPresent(
			key_pluralLabelName = "Custom Objects",
			locator1 = "VisualizeObjectDisplayPage#SELECT_OBJECT");
	}

	@description = "LPS-139005 - Verify that the Object is no longer displayed on the Page Template (subtype) when inactivated"
	@priority = "4"
	test ObjectDisappearsPageTemplateWhenInactivated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		VisualizeObjectDisplayPage.openPageTemplate();

		Click(locator1 = "VisualizeObjectDisplayPage#SELECT_BLANK_OBJECT_DISPLAY_PAGE_TEMPLATE");

		Click(locator1 = "VisualizeObjectDisplayPage#OBJECT_CONTENT_TYPE");

		AssertElementNotPresent(
			key_type = "Custom Object",
			locator1 = "VisualizeObjectDisplayPage#CONTENT_TYPE_OPTION",
			value1 = "Custom Object");
	}

	@description = "LPS-139005 - Verify that the Object is no longer displayed on the Workflow Process Builder page when inactivated"
	@priority = "4"
	test ObjectDisappearsProcessBuilderWhenInactivated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		WaitForSPARefresh();

		ObjectAdmin.openWorkflowProcessBuilderConfiguration();

		AssertElementNotPresent(
			key_workflowResourceValue = "Custom Object",
			locator1 = "WorkflowConfiguration#RESOURCE_TABLE_WORKFLOW");
	}

	@description = "LPS-139005 - Verify that the Object is no longer displayed on the Workflow Site Menu page when inactivated"
	@priority = "4"
	test ObjectDisappearsWorkflowSiteMenuWhenInactivated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			panelCategoryKey = "site_administration.content",
			pluralLabelName = "Custom Objects",
			scope = "site");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Configuration",
			portlet = "Workflow");

		AssertElementNotPresent(
			key_workflowResourceValue = "Custom Object",
			locator1 = "WorkflowConfiguration#RESOURCE_TABLE_WORKFLOW");
	}

	@description = "LPS-139005 - Verify that the Object entries are not displayed on Page fragments from an Object that was inactivated"
	@ignore = "Test Stub"
	@priority = "4"
	test ObjectEntriesDisappearsPageFragmentsWhenInactivated {

		// TODO LPS-140867 ObjectEntriesDisappearsPageFragmentsWhenInactivated pending implementation

	}

	@description = "LPS-135649 - Verify that pending and completed Object entries disappears from Workflow Metrics page when they are deleted"
	@ignore = "Test Stub"
	@priority = "4"
	test ObjectEntriesDisappearsWorkflowMetricsWhenDeleted {

		// TODO LPS-141636 ObjectEntriesDisappearsWorkflowMetricsWhenDeleted pending implementation

	}

	@description = "LPS-139005 - Verify that pending and completed Object entries with workflow are not displayed on the Workflow Metrics page when inactivated"
	@ignore = "Test Stub"
	@priority = "4"
	test ObjectEntriesDisappearsWorkflowMetricsWhenInactivated {

		// TODO LPS-140866 ObjectEntriesDisappearsWorkflowMetricsWhenInactivated pending implementation

	}

	@description = "LPS-135649 - Verify that pending and completed Object entries disappears from Workflow pages (My Workflow Tasks, Submissions, and My Submissions) when they are deleted"
	@ignore = "Test Stub"
	@priority = "4"
	test ObjectEntriesDisappearsWorkflowPagesWhenDeleted {

		// TODO LPS-141635 ObjectEntriesDisappearsWorkflowPagesWhenDeleted pending implementation

	}

	@description = "LPS-139005 - Verify that pending and completed Object entries with workflow are not displayed on the workflow pages (My Workflow Tasks, My Submissions, and Submissions) when inactivated"
	@priority = "4"
	test ObjectEntriesDisappearsWorkflowPagesWhenInactivated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		WaitForSPARefresh();

		ObjectAdmin.openWorkflowProcessBuilderConfiguration();

		Workflow.configureWorkflow(
			workflowDefinition = "Single Approver",
			workflowResourceValue = "Custom Object");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "Test");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "Test 2");

		ObjectAdmin.openMyWorkflowTasks();

		Navigator.gotoNavTab(navTab = "Assigned to My Roles");

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Assign to Me");

		Workflow.confirmWorkflowAction();

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Approve");

		Workflow.confirmWorkflowAction();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		ObjectAdmin.openMyWorkflowTasks();

		AssertElementNotPresent(
			key_workflowAssetTitle = "Custom Object",
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_ME_TABLE_ASSET_TYPE");

		Navigator.gotoNavTab(navTab = "Assigned to My Roles");

		AssertElementNotPresent(
			key_workflowAssetTitle = "Custom Object",
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_ME_TABLE_ASSET_TYPE");

		ObjectAdmin.openMySubmissions();

		AssertElementNotPresent(
			key_submissionName = "Custom Object",
			locator1 = "WorkflowSubmissions#SUBMISSION_BY_NAME");

		ObjectAdmin.openSubmissions();

		AssertElementNotPresent(
			key_submissionName = "Custom Object",
			locator1 = "WorkflowSubmissions#SUBMISSION_BY_NAME");
	}

	@description = "LPS-139005 - Verify that the Object entries are displayed again on Page fragments from an Object that was reactivated"
	@priority = "4"
	test ObjectEntriesReappearsPageFragmentsWhenReactivated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject142598",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject142598");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject142598");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject142598",
			value = "Test 1");

		Navigator.openURL();

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		VisualizeObjectCollectionDisplay.openHeading();

		VisualizeObjectDisplayPage.addItem(
			frameTitle = "Select",
			pluralLabelName = "Custom Objects");

		VisualizeObjectCollectionDisplay.mapFragment(fieldLabel = "Custom Field");

		PageEditor.clickPublish();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.checkToggleActive();

		CreateObject.saveObject();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "View",
			pageName = "Test Content Page Name");

		VisualizeObjectDisplayPage.assertDisplayEntry(entry = "Test 1");
	}

	@description = "LPS-139005 - Verify that the Object entries with workflow are displayed again on the Workflow Metrics page when reactivated"
	@ignore = "Test Stub"
	@priority = "4"
	test ObjectEntriesReappearsWorkflowMetricsWhenReactivated {

		// TODO LPS-140888 ObjectEntriesReappearsWorkflowMetricsWhenReactivated pending implementation

	}

	@description = "LPS-139005 - Verify that pending and completed Object entries with workflow are displayed again on the workflow pages (My Workflow Tasks, My Submissions, and Submissions) when reactivated"
	@priority = "4"
	test ObjectEntriesReappearsWorkflowPagesWhenReactivated {
		property portal.upstream = "quarantine";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject140887",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject140887");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject140887");

		ObjectAdmin.openObjectAdmin();

		WaitForSPARefresh();

		ObjectAdmin.openWorkflowProcessBuilderConfiguration();

		Workflow.configureWorkflow(
			workflowDefinition = "Single Approver",
			workflowResourceValue = "Custom Object");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject140887",
			value = "Test");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject140887",
			value = "Test 2");

		ObjectAdmin.openMyWorkflowTasks();

		Navigator.gotoNavTab(navTab = "Assigned to My Roles");

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Assign to Me");

		Workflow.confirmWorkflowAction();

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Approve");

		Workflow.confirmWorkflowAction();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.checkToggleActive();

		CreateObject.saveObject();

		ObjectAdmin.openMyWorkflowTasks();

		AssertElementPresent(
			key_workflowAssetTitle = "Custom Object",
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_ME_TABLE_ASSET_TYPE");

		Navigator.gotoNavTab(navTab = "Assigned to My Roles");

		AssertElementPresent(
			key_workflowAssetTitle = "Custom Object",
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_ME_TABLE_ASSET_TYPE");

		ObjectAdmin.openMySubmissions();

		AssertElementPresent(
			key_submissionName = "Custom Object",
			locator1 = "WorkflowSubmissions#SUBMISSION_BY_NAME");

		ObjectAdmin.openSubmissions();

		AssertElementPresent(
			key_submissionName = "Custom Object",
			locator1 = "WorkflowSubmissions#SUBMISSION_BY_NAME");
	}

	@description = "LPS-135649 - Verify the Asset Title, Asset Type and Item Subject of a Object's entry on the Workflow Metrics page"
	@priority = "4"
	test ObjectInfoDisplayedOnWorkflowMetrics {
		property test.run.environment = "EE";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.selectTitleField(fieldLabel = "Custom Field");

		CreateObject.saveObject();

		Navigator.openURL();

		ObjectAdmin.openWorkflowProcessBuilderConfiguration();

		Workflow.configureWorkflow(
			workflowDefinition = "Single Approver",
			workflowResourceValue = "Custom Object");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "Entry Test");

		Navigator.openURL();

		WorkflowMetrics.goToWorkflowProcessMetrics(workflowProcessName = "Single Approver");

		Click(locator1 = "WorkflowMetrics#DASHBOARD_TOTAL_PENDING_ITEMS_TITLE");

		Workflow.assertInfoItem(
			key_assignee = "Unassigned",
			key_createdBy = "Test Test",
			key_dueDate = "-",
			key_itemSubject = "Custom Object: Entry Test",
			key_processStep = "Review");

		WorkflowMetricsAllItemsList.assertInfoItemByIDEntry(
			assetTitle = "Entry Test",
			assetType = "Custom Object",
			createdBy = "Test Test",
			currentAssignee = "Unassigned",
			currentStep = "Review",
			processStatus = "Pending");
	}

	@description = "LPS-139603 - Verify that the Object Name is displayed on the Relationship tab when a Relationship is created"
	@priority = "4"
	test ObjectNameDisplayedOnTheRelationshipTab {
		for (var letter : list "A,B") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object ${letter}",
				objectName = "CustomObject${letter}",
				pluralLabelName = "Custom Objects ${letter}");
		}

		for (var letter : list "A,B") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldLabelName = "Custom Field ${letter}",
				fieldName = "customObjectField${letter}",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject${letter}");
		}

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObjectA",
			objectName_2 = "CustomObjectB",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object A");

		ObjectAdmin.gotoRelationshipsTab();

		CreateObject.assertRelatedObject(relatedObject = "CustomObjectB");
	}

	@description = "LPS-135549 - Verify that the Object Name is autofilled when Label is filled"
	@priority = "4"
	test ObjectNameIsAutofilled {
		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.addNewObject(
			fieldLabelName = "Custom Object",
			pluralLabelName = "");

		CreateObject.assertObjectDefinitionName(objectName = "CustomObject");
	}

	@description = "LPS-135649 - Verify that when Objects are not scoped by Site it should not be displayed on the Workflow settings from the Site Menu"
	@ignore = "Test Stub"
	@priority = "4"
	test ObjectNotScopedBySiteNotDisplayedOnSiteMenu {

		// TODO LPS-141633 ObjectNotScopedBySiteNotDisplayedOnSiteMenu pending implementation

	}

	@description = "LPS-139005 - Verify that the Object portlet is no longer displayed on the Open Menu when inactivated"
	@priority = "5"
	test ObjectPorletDisappearsOpenMenuWhenInactivated {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		ApplicationsMenuHelper.openApplicationsMenu();

		ApplicationsMenu.gotoPanel(panel = "Control Panel");

		AssertElementNotPresent(
			key_category = "Object",
			key_portlet = "Custom Objects",
			locator1 = "ApplicationsMenu#PORTLET");
	}

	@description = "LPS-139005 - Verify that the Object portlet is no longer displayed on the Site Menu when inactivated"
	@priority = "4"
	test ObjectPorletDisappearsSiteMenuWhenInactivated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			panelCategoryKey = "site_administration.content",
			pluralLabelName = "Custom Objects",
			scope = "site");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		Navigator.openURL();

		ProductMenuHelper.openProductMenu();

		ProductMenuHelper.expandCategory(category = "Content & Data");

		AssertElementNotPresent(
			key_portlet = "Custom Object",
			locator1 = "ProductMenu#PORTLET",
			value1 = "Custom Object");
	}

	@description = "LPS-139005 - Verify that the Object portlet is displayed again on the Open Menu when reactivated"
	@priority = "4"
	test ObjectPortletReappearsOpenMenuWhenReactivated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.checkToggleActive();

		CreateObject.saveObject();

		ObjectPortlet.assertObjectIsDisplayedOnControlPanel();
	}

	@description = "LPS-139005 - Verify that the Object portlet is displayed again on the Site Menu when reactivated"
	@priority = "4"
	test ObjectPortletReappearsSiteMenuWhenReactivated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			panelCategoryKey = "site_administration.content",
			pluralLabelName = "Custom Objects",
			scope = "site");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.checkToggleActive();

		CreateObject.saveObject();

		Navigator.openURL();

		ProductMenuHelper.openProductMenu();

		ProductMenuHelper.expandCategory(category = "Content & Data");

		AssertElementPresent(
			key_portlet = "Custom Objects",
			locator1 = "ProductMenu#PORTLET",
			value1 = "Custom Objects");
	}

	@description = "LPS-139005 - Verify that the Object is displayed again on the Collection Providers when reactivated"
	@priority = "4"
	test ObjectReappearsCollectionProvidersWhenReactivated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.checkToggleActive();

		CreateObject.saveObject();

		VisualizeObjectCollectionDisplay.openObjectCollectionProvider();

		AssertElementPresent(
			key_labelName = "Custom Objects",
			locator1 = "VisualizeObjectCollectionDisplay#VIEW_OBJECT_COLLECTION_DISPLAY");
	}

	@description = "LPS-139005 - Verify that the Object is displayed again on the Form's storage type when reactivated"
	@priority = "4"
	test ObjectReappearsFormStorageTypeWhenReactivated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.checkToggleActive();

		CreateObject.saveObject();

		PopulateObjectFormsConfiguration.openForm();

		FormsAdminNavigator.gotoAddForm();

		PopulateObjectFormsConfiguration.openFormSettings();

		PopulateObjectFormsConfiguration.selectObject(label = "Object");

		Click(locator1 = "PopulateObjectFormsConfiguration#DEFAULT_SELECT_OBJECT");

		AssertElementPresent(
			key_label = "Custom Object",
			locator1 = "PopulateObjectFormsConfiguration#DISPLAY_SELECT_OBJECT");
	}

	@description = "LPS-139005 - Verify that the Object is displayed again on the Page Item Selector when reactivated"
	@priority = "4"
	test ObjectReappearsPageItemSelectorWhenReactivated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.checkToggleActive();

		CreateObject.saveObject();

		Navigator.openURL();

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		VisualizeObjectCollectionDisplay.openHeading();

		Click.javaScriptClick(locator1 = "VisualizeObjectDisplayPage#SELECT_ITEM");

		SelectFrame(
			key_title = "Select",
			locator1 = "IFrame#MODAL_ANY");

		AssertElementPresent(
			key_pluralLabelName = "Custom Objects",
			locator1 = "VisualizeObjectDisplayPage#SELECT_OBJECT");
	}

	@description = "LPS-139005 - Verify that the Object is displayed again on the Page Template (subtype) when reactivated"
	@priority = "4"
	test ObjectReappearsPageTemplateWhenReactivated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.checkToggleActive();

		CreateObject.saveObject();

		VisualizeObjectDisplayPage.openPageTemplate();

		Click(locator1 = "VisualizeObjectDisplayPage#SELECT_BLANK_OBJECT_DISPLAY_PAGE_TEMPLATE");

		Click(locator1 = "VisualizeObjectDisplayPage#OBJECT_CONTENT_TYPE");

		AssertElementPresent(
			locator1 = "VisualizeObjectDisplayPage#OBJECT_CONTENT_TYPE",
			value1 = "Custom Object");
	}

	@description = "LPS-139005 - Verify that the Object is displayed again on the Workflow Process Builder page when reactivated"
	@priority = "4"
	test ObjectReappearsProcessBuilderWhenReactivated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.checkToggleActive();

		CreateObject.saveObject();

		WaitForSPARefresh();

		ObjectAdmin.openWorkflowProcessBuilderConfiguration();

		AssertElementPresent(
			key_workflowResourceValue = "Custom Object",
			locator1 = "WorkflowConfiguration#RESOURCE_TABLE_WORKFLOW");
	}

	@description = "LPS-139005 - Verify that the Object is displayed again on the Workflow Site Menu page when reactivated"
	@priority = "4"
	test ObjectReappearsWorkflowSiteMenuWhenReactivated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			panelCategoryKey = "Content & Data",
			pluralLabelName = "Custom Objects",
			scope = "site");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.checkToggleActive();

		CreateObject.saveObject();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Site Administration",
			portlet = "Workflow");

		AssertElementPresent(
			key_workflowResourceValue = "Custom Object",
			locator1 = "WorkflowConfiguration#RESOURCE_TABLE_WORKFLOW");
	}

	@description = "LPS-135551 - Verify that when the Object is scoped by Site each site will have its own entries"
	@ignore = "Test Stub"
	@priority = "4"
	test ObjectScopedBySiteEntries {

		// TODO LPS-141649 ObjectScopedBySiteEntries pending implementation

	}

	@description = "LPS-137741 - Verify that Objects created on a Virtual Instance are not displayed on the Panel of the Main Instance and vice versa"
	@ignore = "Test Stub"
	@priority = "4"
	test PanelDisplaysOnlyItsInstanceObjects {

		// TODO LPS-141683 PanelDisplaysOnlyItsInstanceObjects pending implementation

	}

	@description = "LPS-135401 - Verify that by default the Prevent deletion type of Relationship is selected"
	@ignore = "Test Stub"
	@priority = "4"
	test PreventDeletionIsDefault {

		// TODO LPS-141664 PreventDeletionIsDefault pending implementation

	}

	@description = "LPS-135401 - Verify if Prevent deletion type of Relationship Many to Many won't allow the user to delete an entry with relation"
	@ignore = "Test Stub"
	@priority = "4"
	test PreventDeletionManyToManyWontAllowDelete {

		// TODO LPS-141665 PreventDeletionManyToManyWontAllowDelete pending implementation

	}

	@description = "LPS-135401 - Verify if Prevent deletion type of Relationship One to Many will allow the user to delete an entry with relation from the child Object"
	@ignore = "Test Stub"
	@priority = "4"
	test PreventDeletionOneToManyWillAllowDelete {

		// TODO LPS-141667 PreventDeletionOneToManyWillAllowDelete pending implementation

	}

	@description = "LPS-135401 - Verify if Prevent deletion type of Relationship One to Many won't allow the user to delete an entry with relation from the parent Object"
	@priority = "5"
	test PreventDeletionOneToManyWontAllowDelete {
		property portal.acceptance = "true";

		for (var nameObject : list "A,B") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object ${nameObject}",
				objectName = "CustomObject${nameObject}",
				pluralLabelName = "Custom Objects ${nameObject}");
		}

		for (var nameField : list "A,B") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldLabelName = "Custom Field ${nameField}",
				fieldName = "customObjectField${nameField}",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject${nameField}");
		}

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObjectA",
			objectName_2 = "CustomObjectB",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object A");

		CreateObject.selectTitleField(fieldLabel = "Custom Field A");

		Button.clickSave();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectA");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectB");

		for (var nameEntry : list "A,B") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField${nameEntry}",
				objectName = "CustomObject${nameEntry}",
				value = "Entry ${nameEntry}");
		}

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectB");

		ObjectPortlet.viewEntryDetails(entry = "Entry B");

		CreateObject.chooseEntryOnRelationshipField(entryOption = "Entry A");

		Button.clickSave();

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectA");

		ObjectPortlet.deleteEntry(entry = "Entry A");

		ObjectPortlet.viewEntry(entry = "Entry A");
	}

	@description = "LPS-139418 - Verify that previous filled data is not kept when cancelling the creation of an Object"
	@priority = "4"
	test PreviousFilledDataIsNotKeptAfterCancel {
		ObjectAdmin.openObjectAdmin();

		LexiconEntry.gotoAdd();

		ObjectAdmin.addNewObject(
			fieldLabelName = "Object Y",
			pluralLabelName = "Objects Y");

		Button.clickCancel();

		Click(locator1 = "ObjectAdmin#ADD_CUSTOM_OBJECT");

		AssertTextEquals(
			locator1 = "ObjectAdmin#PLURAL_LABEL_CUSTOM_OBJECT",
			value1 = "");

		AssertTextEquals(
			locator1 = "ObjectAdmin#LABEL_CUSTOM_OBJECT",
			value1 = "");

		AssertTextEquals(
			locator1 = "ObjectAdmin#NAME_CUSTOM_OBJECT",
			value1 = "");
	}

	@description = "LPS-135400 - Verify that relationship field is automatically created"
	@priority = "5"
	test RelationshipFieldAutomaticallyCreated {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object A",
			objectName = "CustomObjectA",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object B",
			objectName = "CustomObjectB",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object A");

		ObjectAdmin.gotoRelationshipsTab();

		ObjectAdmin.addObjectRelationshipViaUI(
			label = "Relationship",
			object = "CustomObjectB",
			type = "One to Many");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object B");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.assertObjectField(
			fieldLabel = "Custom Object A",
			fieldType = "Long");
	}

	@description = "LPS-139005 - Verify that the Relationship field will not be displayed on a Collection Display with List Style set as Table when the parent object is inactivated"
	@ignore = "Test Stub"
	@priority = "4"
	test RelationshipFieldCannotBeDisplayedForCollectionDisplayTableWhenInactivated {

		// TODO LPS-140871 RelationshipFieldCannotBeDisplayedForCollectionDisplayTableWhenInactivated pending implementation

	}

	@description = "LPS-139005 - Verify that the Relationship field will not be displayed to be selected for a Page fragment when the parent object is inactivated"
	@priority = "4"
	test RelationshipFieldCannotBeSelectedForPageFragmentWhenInactivated {
		for (var letter : list "A,B") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object ${letter}",
				objectName = "CustomObject${letter}",
				pluralLabelName = "Custom Objects ${letter}");
		}

		for (var letter : list "A,B") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldLabelName = "Custom Field ${letter}",
				fieldName = "customObjectField${letter}",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject${letter}");
		}

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObjectA",
			objectName_2 = "CustomObjectB",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectA");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectB");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectFieldB",
			objectName = "CustomObjectB",
			value = "Entry");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object A");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		Navigator.openURL();

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		VisualizeObjectCollectionDisplay.openHeading();

		VisualizeObjectDisplayPage.addItem(
			frameTitle = "Select",
			pluralLabelName = "Custom Objects B");

		Click(locator1 = "VisualizeObjectCollectionDisplay#MAP_FRAGMENT");

		AssertElementNotPresent(
			key_option = "Custom Object A",
			locator1 = "VisualizeObjectCollectionDisplay#FIELD_NAME_OPTION");
	}

	@description = "LPS-139005 - Verify that the Relationship field is no longer displayed when the parent object is inactivated (One to Many)"
	@priority = "4"
	test RelationshipFieldDisappearsWhenInactivatedOneToMany {
		for (var letter : list "A,B") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object ${letter}",
				objectName = "CustomObject${letter}",
				pluralLabelName = "Custom Objects ${letter}");
		}

		for (var letter : list "A,B") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldLabelName = "Custom Field ${letter}",
				fieldName = "customObjectField${letter}",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject${letter}");
		}

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObjectA",
			objectName_2 = "CustomObjectB",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectA");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectB");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectFieldB",
			objectName = "CustomObjectB",
			value = "Entry 1");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object A");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		Navigator.openURL();

		ApplicationsMenu.gotoPortlet(
			category = "Object",
			panel = "Control Panel",
			portlet = "Custom Objects B");

		LexiconEntry.gotoAdd();

		AssertElementNotPresent(
			key_fieldLabelName = "Custom Field A",
			locator1 = "ObjectPortlet#FIELD_LABEL_NAME",
			value1 = "Custom Field A");

		Navigator.gotoBack();

		ObjectPortlet.viewEntryDetails(entry = "Entry 1");

		AssertElementNotPresent(
			key_fieldLabelName = "Custom Field A",
			locator1 = "ObjectPortlet#FIELD_LABEL_NAME",
			value1 = "Custom Field A");
	}

	@description = "LPS-135401 - Verify that the Relationship field is not created"
	@ignore = "Test Stub"
	@priority = "4"
	test RelationshipFieldNotCreatedOnManyToMany {

		// TODO LPS-141659 RelationshipFieldNotCreatedOnManyToMany pending implementation

	}

	@description = "LPS-139005 - Verify that the Relationship field is displayed again when the parent object is reactivated (One to Many)"
	@priority = "4"
	test RelationshipFieldReappearsWhenReactivatedOneToMany {
		for (var letter : list "A,B") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object ${letter}",
				objectName = "CustomObject${letter}",
				pluralLabelName = "Custom Objects ${letter}");
		}

		for (var letter : list "A,B") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldLabelName = "Custom Field ${letter}",
				fieldName = "customObjectField${letter}",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject${letter}");
		}

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObjectA",
			objectName_2 = "CustomObjectB",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectA");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectB");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectFieldB",
			objectName = "CustomObjectB",
			value = "Entry 1");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		CreateObject.checkToggleActive();

		CreateObject.saveObject();

		ApplicationsMenu.gotoPortlet(
			category = "Object",
			panel = "Control Panel",
			portlet = "Custom Objects B");

		LexiconEntry.gotoAdd();

		AssertElementPresent(
			key_fieldLabelName = "Custom Object A",
			locator1 = "ObjectPortlet#FIELD_LABEL_NAME",
			value1 = "Custom Object A");

		Navigator.gotoBack();

		ObjectPortlet.viewEntryDetails(entry = "Entry 1");

		AssertElementPresent(
			key_fieldLabelName = "Custom Object A",
			locator1 = "ObjectPortlet#FIELD_LABEL_NAME",
			value1 = "Custom Object A");
	}

	@description = "LPS-139005 - Verify that the Relationship tab is no longer displayed when the other object is inactivated (Many to Many)"
	@ignore = "Test Stub"
	@priority = "4"
	test RelationshipTabDisappearsWhenInactivatedManyToMany {

		// TODO LPS-140874 RelationshipTabDisappearsWhenInactivatedManyToMany pending implementation

	}

	@description = "LPS-139005 - Verify that the Relationship tab is no longer displayed when the child object is inactivated (One to Many)"
	@priority = "4"
	test RelationshipTabDisappearsWhenInactivatedOneToMany {
		for (var letter : list "A,B") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object ${letter}",
				objectName = "CustomObject${letter}",
				pluralLabelName = "Custom Objects ${letter}");
		}

		for (var letter : list "A,B") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldLabelName = "Custom Field ${letter}",
				fieldName = "customObjectField${letter}",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject${letter}");
		}

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObjectA",
			objectName_2 = "CustomObjectB",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout",
			objectName = "CustomObjectA");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object A");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.markLayoutAsDefault();

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = "2",
			fieldLabelName = "Custom Field A",
			tabName = "Field Tab");

		ObjectAdmin.addTabRelationshipsOnLayout(
			relationshipsLabelName = "Relationship",
			tabName = "Relationship Tab");

		Button.clickSave();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectA");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectB");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectFieldA",
			objectName = "CustomObjectA",
			value = "Entry 1");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object B");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		ApplicationsMenu.gotoPortlet(
			category = "Object",
			panel = "Control Panel",
			portlet = "Custom Objects A");

		ObjectPortlet.viewEntryDetails(entry = "Entry 1");

		AssertElementNotPresent(
			key_tabName = "Relationship Tab",
			locator1 = "ObjectAdmin#ENTRY_RELATIONSHIP_TAB");
	}

	@description = "LPS-139005 - Verify that the Relationship tab is displayed again when the other object is reactivated (Many to Many)"
	@priority = "4"
	test RelationshipTabReappearsWhenReactivatedManyToMany {
		for (var letter : list "A,B") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object ${letter}",
				objectName = "CustomObject${letter}",
				pluralLabelName = "Custom Objects ${letter}");
		}

		for (var letter : list "A,B") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldLabelName = "Custom Field ${letter}",
				fieldName = "customObjectField${letter}",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject${letter}");
		}

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObjectA",
			objectName_2 = "CustomObjectB",
			relationshipLabel = "Relationship A",
			relationshipName = "relationshipA",
			relationshipType = "manyToMany");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObjectB",
			objectName_2 = "CustomObjectA",
			relationshipLabel = "Relationship B",
			relationshipName = "relationshipB",
			relationshipType = "manyToMany");

		for (var letter : list "A,B") {
			ObjectAdmin.addObjectLayoutViaAPI(
				layoutName = "Layout",
				objectName = "CustomObject${letter}");
		}

		for (var letter : list "A,B") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object ${letter}");

			ObjectAdmin.goToLayoutsTab();

			ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

			ObjectAdmin.markLayoutAsDefault();

			ObjectAdmin.goToLayoutTabOnLayouts();

			ObjectAdmin.addTabFieldsOnLayout(
				blockName = "Block 1",
				columnsNumber = "1",
				fieldLabelName = "Custom Field ${letter}",
				tabName = "Field Tab");

			ObjectAdmin.addTabRelationshipsOnLayout(
				relationshipsLabelName = "Relationship ${letter}",
				tabName = "Relationship Tab");

			Button.clickSave();
		}

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectA");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectB");

		for (var fieldEntry : list "A,B") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField${fieldEntry}",
				objectName = "CustomObject${fieldEntry}",
				value = "Entry ${fieldEntry}");
		}

		ObjectAdmin.openObjectAdmin();

		CreateObject.inactiveCustomObject(objectName = "Custom Object B");

		ObjectAdmin.openObjectAdmin();

		CreateObject.activeCustomObject(objectName = "Custom Object B");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectA");

		ObjectPortlet.viewEntryDetails(entry = "Entry A");

		ObjectAdmin.assertRelationshipTabPresent();

		ObjectAdmin.openObjectAdmin();

		CreateObject.inactiveCustomObject(objectName = "Custom Object A");

		ObjectAdmin.openObjectAdmin();

		CreateObject.activeCustomObject(objectName = "Custom Object A");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectB");

		ObjectPortlet.viewEntryDetails(entry = "Entry B");

		ObjectAdmin.assertRelationshipTabPresent();
	}

	@description = "LPS-139005 - Verify that the Relationship tab is displayed again when the child object is reactivated (One to Many)"
	@priority = "4"
	test RelationshipTabReappearsWhenReactivatedOneToMany {
		for (var letter : list "A,B") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object ${letter}",
				objectName = "CustomObject${letter}",
				pluralLabelName = "Custom Objects ${letter}");
		}

		for (var letter : list "A,B") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldLabelName = "Custom Field ${letter}",
				fieldName = "customObjectField${letter}",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject${letter}");
		}

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObjectA",
			objectName_2 = "CustomObjectB",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout",
			objectName = "CustomObjectA");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object A");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.markLayoutAsDefault();

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = "2",
			fieldLabelName = "Custom Field A",
			tabName = "Field Tab");

		ObjectAdmin.addTabRelationshipsOnLayout(
			relationshipsLabelName = "Relationship",
			tabName = "Relationship Tab");

		Button.clickSave();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectA");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectB");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectFieldA",
			objectName = "CustomObjectA",
			value = "Entry 1");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object B");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object B");

		CreateObject.checkToggleActive();

		CreateObject.saveObject();

		ApplicationsMenu.gotoPortlet(
			category = "Object",
			panel = "Control Panel",
			portlet = "Custom Objects A");

		ObjectPortlet.viewEntryDetails(entry = "Entry 1");

		AssertElementPresent(
			key_tabName = "Relationship Tab",
			locator1 = "ObjectAdmin#ENTRY_RELATIONSHIP_TAB");
	}

	@description = "LPS-135549 - Verify that the columns Name, System and Status displays the correct value on the Objects table when a Custom Object is created"
	@priority = "4"
	test TableDisplayCorrectValueWhenObjectCreated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.assertObjectColumnValue(
			label = "Custom Object",
			scope = "company",
			status = "Draft",
			system = "No");
	}

	@description = "LPS-138213 - Verify that updated data is kept when clicking on the Publish button"
	@ignore = "Test Stub"
	@priority = "4"
	test UpdatedDataIsKeptWhenPublishing {

		// TODO LPS-141685 UpdatedDataIsKeptWhenPublishing pending implementation

	}

	@description = "LPS-135548 - Verify that user can view custom objects"
	@priority = "5"
	test ViewCustomObjects {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.viewCustomObject(name = "Custom Object");
	}

	@description = "LPS-135548 - Verify that user can view system objects"
	@priority = "5"
	test ViewSystemObjects {
		property portal.acceptance = "true";

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.viewSystemObject(name = "User");
	}

	@description = "LPS-135649 - Verify that a withdrawn pending entry is displayed with a Draft status"
	@ignore = "Test Stub"
	@priority = "4"
	test WithdrawnEntryDisplaysDraftStatus {

		// TODO LPS-141630 WithdrawnEntryDisplaysDraftStatus pending implementation

	}

	@description = "LPS-135649 - Verify that the workflow is triggered when submitting an entry through Forms"
	@priority = "4"
	test WorkflowTriggeredWhenSubmitingEntryThroughForms {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openWorkflowProcessBuilderConfiguration();

		Workflow.configureWorkflow(
			workflowDefinition = "Single Approver",
			workflowResourceValue = "Custom Object");

		Navigator.openURL();

		PopulateObjectFormsConfiguration.openForm();

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form Object");

		PopulateObjectFormsConfiguration.openFormSettings();

		PopulateObjectFormsConfiguration.selectObject(label = "Object");

		PopulateObjectFormsConfiguration.selectCustomObject(label = "Custom Object");

		Form.gotoAddField(fieldType = "Text");

		PopulateObjectFormsConfiguration.mapFormField(fieldLabelName = "Custom Field");

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormViewBuilder.editText(
			fieldName = "Text",
			fieldValue = "Entry Test");

		FormPortlet.submitSuccessfully();

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.assertEntryStauts(
			key_entry = "Entry Test",
			key_status = "Pending");
	}

	@description = "LPS-135649 - Verify that the workflow is triggered when submitting an entry through Custom Object portlet"
	@ignore = "Test Stub"
	@priority = "4"
	test WorkflowTriggeredWhenSubmitingEntryThroughObjectPortlet {

		// TODO LPS-141628 WorkflowTriggeredWhenSubmitingEntryThroughObjectPortlet pending implementation

	}

	@description = "LPS-135649 - Verify that the workflow is triggered when submitting an entry when Object is scoped by Site and the workflow was assigned on the Workflow settings from the Site Menu"
	@priority = "4"
	test WorkflowTriggeredWhenSubmitingEntryThroughObjectPortletFromSiteMenu {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			panelCategoryKey = "site_administration.content",
			pluralLabelName = "Custom Objects",
			scope = "site");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openWorkflowProcessBuilderConfiguration();

		Workflow.configureWorkflow(
			workflowDefinition = "Single Approver",
			workflowResourceValue = "Custom Object");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.addSingleFieldEntryViaUI(entry = "Entry Test");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.assertEntryStauts(
			key_entry = "Entry Test",
			key_status = "Pending");
	}

}