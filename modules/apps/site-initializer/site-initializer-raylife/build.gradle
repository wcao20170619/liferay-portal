import com.liferay.gradle.util.OSDetector
import com.liferay.gradle.util.StringUtil

import java.text.DateFormat
import java.text.SimpleDateFormat

import java.util.Date
import java.util.TimeZone

import org.gradle.util.GUtil

apply plugin: "com.liferay.node"

configurations {
	extraRemoteApp
}

task buildExtraRemoteApp
task forceDeploy
task zipExtraRemoteApp(type: Zip)

String extraRemoteAppName = "com.liferay.site.initializer.raylife.extra.remote.app"
String extraRemoteAppVersion = "20220110.1604"

DateFormat dateFormat = new SimpleDateFormat("yyyyMMdd.HHmm")

dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"))

String dateString = dateFormat.format(new Date())

artifacts {
	extraRemoteApp zipExtraRemoteApp
}

dependencies {
	extraRemoteApp ext: "zip", group: "com.liferay", name: extraRemoteAppName, version: extraRemoteAppVersion
}

forceDeploy {
	finalizedBy deploy
}

node {
	global = false
	nodeVersion = "14.17.6"
	useNpm = false
}

processResources {
	if (gradle.startParameter.taskNames.contains("forceDeploy") || gradle.startParameter.taskNames.contains("uploadExtraRemoteApp")) {
		dependsOn buildExtraRemoteApp

		into("site-initializer/documents/company/remote-app") {
			from(new File(projectDir, "extra/remote-app/build/static/css")) {
				include "*.css"
			}

			from(new File(projectDir, "extra/remote-app/build/static/js")) {
				include "*.js"
			}
		}

		rename(/([0-9a-zA-Z-]+).*\.(css|js)$/, '$1.$2')
	}
	else {
		into("site-initializer/documents/company/remote-app") {
			from zipTree(configurations.extraRemoteApp.singleFile)
		}
	}
}

uploadExtraRemoteApp {
	doLast {
		File buildGradleFile = file("build.gradle")

		String content = buildGradleFile.getText("UTF-8")

		content = content.replaceFirst(~/String extraRemoteAppVersion = "(\w+\.\w+)"/) {
			String all, String versionString ->

			all.replace versionString, dateString
		}

		buildGradleFile.setText content, "UTF-8"
	}

	repositories {
		mavenDeployer {
			pom {
				artifactId = GUtil.loadProperties(file("bnd.bnd"))["Bundle-SymbolicName"] + ".extra.remote.app"
				groupId = "com.liferay"
				version = dateString
			}

			if (project.path.startsWith(":dxp:")) {
				repository(url: "https://repository.liferay.com/nexus/content/repositories/liferay-private-releases") {
					authentication password: System.properties["repository.private.password"], userName: System.properties["repository.private.username"]
				}
			}
		}
	}
}

zipExtraRemoteApp {
	if (!System.getenv("JENKINS_HOME")) {
		dependsOn buildExtraRemoteApp

		archiveName "extra-remote-app.zip"
		destinationDir new File(buildDir, "dist")

		from(new File(projectDir, "extra/remote-app/build/static/css")) {
			include "*.css"
		}

		from(new File(projectDir, "extra/remote-app/build/static/js")) {
			include "*.js"
		}

		rename(/([0-9a-zA-Z-]+).*\.(css|js)$/, '$1.$2')
	}
}

_createExtraRemoteAppTasks()

private void _createExtraRemoteAppTasks() {
	File dir = new File(projectDir, "extra/remote-app")

	Task yarnInstallExtraRemoteAppTask = tasks.create(name: "yarnInstallExtraRemoteApp", type: Exec) {
		if (OSDetector.windows) {
			executable "cmd.exe"

			args "/c"
			args new File(node.nodeDir, "node.exe")
			args new File(node.nodeDir, "node_modules/yarn/yarn-" + node.yarnVersion + ".js")
		}
		else {
			executable new File(node.nodeDir, "bin/node")

			args new File(node.nodeDir, "lib/node_modules/yarn/yarn-" + node.yarnVersion + ".js")
		}

		args "install"
		dependsOn downloadNode
		workingDir dir
	}

	Task yarnBuildExtraRemoteAppTask = tasks.create(name: "yarnBuildExtraRemoteApp", type: Exec) {
		if (OSDetector.windows) {
			executable "cmd.exe"

			args "/c"
			args new File(node.nodeDir, "node.exe")
			args new File(node.nodeDir, "node_modules/yarn/yarn-" + node.yarnVersion + ".js")
		}
		else {
			executable new File(node.nodeDir, "bin/node")

			args new File(node.nodeDir, "lib/node_modules/yarn/yarn-" + node.yarnVersion + ".js")
		}

		args "build"
		dependsOn yarnInstallExtraRemoteAppTask
		workingDir dir
	}

	buildExtraRemoteApp.finalizedBy yarnBuildExtraRemoteAppTask
}